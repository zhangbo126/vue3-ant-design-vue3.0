import { ExtractPropTypes } from 'vue';
declare const skeletonParagraphProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number | import("../_util/type").Key[]>;
    rows: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
};
export declare const SkeletonParagraphProps: import("vue-types").VueTypeShape<{
    prefixCls: string;
    width: string | number | import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
    rows: number;
}>;
export declare type ISkeletonParagraphProps = Partial<ExtractPropTypes<typeof skeletonParagraphProps>>;
declare const Paragraph: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    width: import("vue-types").VueTypeDef<string | number | import("../_util/type").Key[]>;
    rows: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
}, unknown, unknown, {}, {
    getWidth(index: number): import("../_util/type").Key;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls: string;
    rows: number;
} & {
    width?: string | number | import("../_util/type").Key[];
}>, {
    prefixCls: string;
    rows: number;
}>;
export default Paragraph;
