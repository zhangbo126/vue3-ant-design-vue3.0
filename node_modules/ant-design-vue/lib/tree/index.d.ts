import { App } from 'vue';
import DirectoryTree from './DirectoryTree';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        }> & Pick<Readonly<{
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        } & {
            multiple?: boolean;
            disabled?: boolean;
            showIcon?: boolean;
            selectable?: boolean;
            openAnimation?: any;
            draggable?: boolean;
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            checkedKeys?: import("../_util/type").Key[] | {
                checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
                halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
            };
            treeData?: import("./Tree").TreeDataItem[];
            expandedKeys?: import("../_util/type").Key[];
            autoExpandParent?: boolean;
            loadedKeys?: import("../_util/type").Key[];
            checkable?: boolean;
            blockNode?: boolean;
            showLine?: boolean;
            checkStrictly?: boolean;
            defaultExpandAll?: boolean;
            defaultExpandParent?: boolean;
            defaultExpandedKeys?: import("../_util/type").Key[];
            defaultCheckedKeys?: import("../_util/type").Key[];
            switcherIcon?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "multiple" | "disabled" | "showIcon" | "selectable" | "openAnimation" | "draggable" | "selectedKeys" | "defaultSelectedKeys" | "checkedKeys" | "treeData" | "expandedKeys" | "autoExpandParent" | "loadedKeys" | "checkable" | "blockNode" | "showLine" | "checkStrictly" | "defaultExpandAll" | "defaultExpandParent" | "defaultExpandedKeys" | "defaultCheckedKeys" | "switcherIcon">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        } & {
            multiple?: boolean;
            disabled?: boolean;
            showIcon?: boolean;
            selectable?: boolean;
            openAnimation?: any;
            draggable?: boolean;
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            checkedKeys?: import("../_util/type").Key[] | {
                checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
                halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
            };
            treeData?: import("./Tree").TreeDataItem[];
            expandedKeys?: import("../_util/type").Key[];
            autoExpandParent?: boolean;
            loadedKeys?: import("../_util/type").Key[];
            checkable?: boolean;
            blockNode?: boolean;
            showLine?: boolean;
            checkStrictly?: boolean;
            defaultExpandAll?: boolean;
            defaultExpandParent?: boolean;
            defaultExpandedKeys?: import("../_util/type").Key[];
            defaultCheckedKeys?: import("../_util/type").Key[];
            switcherIcon?: any;
        }>, {
            tree: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            renderSwitcherIcon(prefixCls: string, switcherIcon: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, { isLeaf, loading, expanded }: {
                isLeaf: any;
                loading: any;
                expanded: any;
            }): JSX.Element;
            updateTreeData(treeData: import("./Tree").TreeDataItem[]): any;
            setTreeRef(node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            handleCheck(checkedObj: import("../_util/type").Key[], eventObj: import("./Tree").CheckEvent): void;
            handleExpand(expandedKeys: import("../_util/type").Key[], eventObj: import("./Tree").ExpendEvent): void;
            handleSelect(selectedKeys: import("../_util/type").Key[], eventObj: import("./Tree").SelectEvent): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        icon: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        onDblclick: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        onExpand: (...args: any[]) => any;
        "onUpdate:selectedKeys": (...args: any[]) => any;
        loadData: (...args: any[]) => any;
        filterAntTreeNode: (...args: any[]) => any;
        filterTreeNode: (...args: any[]) => any;
        replaceFields: {
            [key: string]: any;
        };
        onCheck: (...args: any[]) => any;
        onDoubleclick: (...args: any[]) => any;
        "onUpdate:checkedKeys": (...args: any[]) => any;
        "onUpdate:expandedKeys": (...args: any[]) => any;
    } & {
        multiple?: boolean;
        disabled?: boolean;
        showIcon?: boolean;
        selectable?: boolean;
        openAnimation?: any;
        draggable?: boolean;
        selectedKeys?: import("../_util/type").Key[];
        defaultSelectedKeys?: import("../_util/type").Key[];
        checkedKeys?: import("../_util/type").Key[] | {
            checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
            halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
        };
        treeData?: import("./Tree").TreeDataItem[];
        expandedKeys?: import("../_util/type").Key[];
        autoExpandParent?: boolean;
        loadedKeys?: import("../_util/type").Key[];
        checkable?: boolean;
        blockNode?: boolean;
        showLine?: boolean;
        checkStrictly?: boolean;
        defaultExpandAll?: boolean;
        defaultExpandParent?: boolean;
        defaultExpandedKeys?: import("../_util/type").Key[];
        defaultCheckedKeys?: import("../_util/type").Key[];
        switcherIcon?: any;
    }> & import("vue").ShallowUnwrapRef<{
        tree: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        renderSwitcherIcon(prefixCls: string, switcherIcon: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, { isLeaf, loading, expanded }: {
            isLeaf: any;
            loading: any;
            expanded: any;
        }): JSX.Element;
        updateTreeData(treeData: import("./Tree").TreeDataItem[]): any;
        setTreeRef(node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        handleCheck(checkedObj: import("../_util/type").Key[], eventObj: import("./Tree").CheckEvent): void;
        handleExpand(expandedKeys: import("../_util/type").Key[], eventObj: import("./Tree").ExpendEvent): void;
        handleSelect(selectedKeys: import("../_util/type").Key[], eventObj: import("./Tree").SelectEvent): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    icon: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onDblclick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    onExpand: (...args: any[]) => any;
    "onUpdate:selectedKeys": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    filterAntTreeNode: (...args: any[]) => any;
    filterTreeNode: (...args: any[]) => any;
    replaceFields: {
        [key: string]: any;
    };
    onCheck: (...args: any[]) => any;
    onDoubleclick: (...args: any[]) => any;
    "onUpdate:checkedKeys": (...args: any[]) => any;
    "onUpdate:expandedKeys": (...args: any[]) => any;
} & {
    multiple?: boolean;
    disabled?: boolean;
    showIcon?: boolean;
    selectable?: boolean;
    openAnimation?: any;
    draggable?: boolean;
    selectedKeys?: import("../_util/type").Key[];
    defaultSelectedKeys?: import("../_util/type").Key[];
    checkedKeys?: import("../_util/type").Key[] | {
        checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
        halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
    };
    treeData?: import("./Tree").TreeDataItem[];
    expandedKeys?: import("../_util/type").Key[];
    autoExpandParent?: boolean;
    loadedKeys?: import("../_util/type").Key[];
    checkable?: boolean;
    blockNode?: boolean;
    showLine?: boolean;
    checkStrictly?: boolean;
    defaultExpandAll?: boolean;
    defaultExpandParent?: boolean;
    defaultExpandedKeys?: import("../_util/type").Key[];
    defaultCheckedKeys?: import("../_util/type").Key[];
    switcherIcon?: any;
}>, {
    tree: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    renderSwitcherIcon(prefixCls: string, switcherIcon: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, { isLeaf, loading, expanded }: {
        isLeaf: any;
        loading: any;
        expanded: any;
    }): JSX.Element;
    updateTreeData(treeData: import("./Tree").TreeDataItem[]): any;
    setTreeRef(node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    handleCheck(checkedObj: import("../_util/type").Key[], eventObj: import("./Tree").CheckEvent): void;
    handleExpand(expandedKeys: import("../_util/type").Key[], eventObj: import("./Tree").ExpendEvent): void;
    handleSelect(selectedKeys: import("../_util/type").Key[], eventObj: import("./Tree").SelectEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    icon: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onDblclick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    onExpand: (...args: any[]) => any;
    "onUpdate:selectedKeys": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    filterAntTreeNode: (...args: any[]) => any;
    filterTreeNode: (...args: any[]) => any;
    replaceFields: {
        [key: string]: any;
    };
    onCheck: (...args: any[]) => any;
    onDoubleclick: (...args: any[]) => any;
    "onUpdate:checkedKeys": (...args: any[]) => any;
    "onUpdate:expandedKeys": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly TreeNode: any;
    readonly DirectoryTree: typeof DirectoryTree;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        }> & Pick<Readonly<{
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        } & {
            multiple?: boolean;
            disabled?: boolean;
            showIcon?: boolean;
            selectable?: boolean;
            openAnimation?: any;
            draggable?: boolean;
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            checkedKeys?: import("../_util/type").Key[] | {
                checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
                halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
            };
            treeData?: import("./Tree").TreeDataItem[];
            expandedKeys?: import("../_util/type").Key[];
            autoExpandParent?: boolean;
            loadedKeys?: import("../_util/type").Key[];
            checkable?: boolean;
            blockNode?: boolean;
            showLine?: boolean;
            checkStrictly?: boolean;
            defaultExpandAll?: boolean;
            defaultExpandParent?: boolean;
            defaultExpandedKeys?: import("../_util/type").Key[];
            defaultCheckedKeys?: import("../_util/type").Key[];
            switcherIcon?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "multiple" | "disabled" | "showIcon" | "selectable" | "openAnimation" | "draggable" | "selectedKeys" | "defaultSelectedKeys" | "checkedKeys" | "treeData" | "expandedKeys" | "autoExpandParent" | "loadedKeys" | "checkable" | "blockNode" | "showLine" | "checkStrictly" | "defaultExpandAll" | "defaultExpandParent" | "defaultExpandedKeys" | "defaultCheckedKeys" | "switcherIcon">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        } & {
            multiple?: boolean;
            disabled?: boolean;
            showIcon?: boolean;
            selectable?: boolean;
            openAnimation?: any;
            draggable?: boolean;
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            checkedKeys?: import("../_util/type").Key[] | {
                checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
                halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
            };
            treeData?: import("./Tree").TreeDataItem[];
            expandedKeys?: import("../_util/type").Key[];
            autoExpandParent?: boolean;
            loadedKeys?: import("../_util/type").Key[];
            checkable?: boolean;
            blockNode?: boolean;
            showLine?: boolean;
            checkStrictly?: boolean;
            defaultExpandAll?: boolean;
            defaultExpandParent?: boolean;
            defaultExpandedKeys?: import("../_util/type").Key[];
            defaultCheckedKeys?: import("../_util/type").Key[];
            switcherIcon?: any;
        }>, {
            tree: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            renderSwitcherIcon(prefixCls: string, switcherIcon: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, { isLeaf, loading, expanded }: {
                isLeaf: any;
                loading: any;
                expanded: any;
            }): JSX.Element;
            updateTreeData(treeData: import("./Tree").TreeDataItem[]): any;
            setTreeRef(node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            handleCheck(checkedObj: import("../_util/type").Key[], eventObj: import("./Tree").CheckEvent): void;
            handleExpand(expandedKeys: import("../_util/type").Key[], eventObj: import("./Tree").ExpendEvent): void;
            handleSelect(selectedKeys: import("../_util/type").Key[], eventObj: import("./Tree").SelectEvent): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            icon: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onDblclick: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            onExpand: (...args: any[]) => any;
            "onUpdate:selectedKeys": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            filterAntTreeNode: (...args: any[]) => any;
            filterTreeNode: (...args: any[]) => any;
            replaceFields: {
                [key: string]: any;
            };
            onCheck: (...args: any[]) => any;
            onDoubleclick: (...args: any[]) => any;
            "onUpdate:checkedKeys": (...args: any[]) => any;
            "onUpdate:expandedKeys": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        icon: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        onDblclick: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        onExpand: (...args: any[]) => any;
        "onUpdate:selectedKeys": (...args: any[]) => any;
        loadData: (...args: any[]) => any;
        filterAntTreeNode: (...args: any[]) => any;
        filterTreeNode: (...args: any[]) => any;
        replaceFields: {
            [key: string]: any;
        };
        onCheck: (...args: any[]) => any;
        onDoubleclick: (...args: any[]) => any;
        "onUpdate:checkedKeys": (...args: any[]) => any;
        "onUpdate:expandedKeys": (...args: any[]) => any;
    } & {
        multiple?: boolean;
        disabled?: boolean;
        showIcon?: boolean;
        selectable?: boolean;
        openAnimation?: any;
        draggable?: boolean;
        selectedKeys?: import("../_util/type").Key[];
        defaultSelectedKeys?: import("../_util/type").Key[];
        checkedKeys?: import("../_util/type").Key[] | {
            checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
            halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
        };
        treeData?: import("./Tree").TreeDataItem[];
        expandedKeys?: import("../_util/type").Key[];
        autoExpandParent?: boolean;
        loadedKeys?: import("../_util/type").Key[];
        checkable?: boolean;
        blockNode?: boolean;
        showLine?: boolean;
        checkStrictly?: boolean;
        defaultExpandAll?: boolean;
        defaultExpandParent?: boolean;
        defaultExpandedKeys?: import("../_util/type").Key[];
        defaultCheckedKeys?: import("../_util/type").Key[];
        switcherIcon?: any;
    }> & import("vue").ShallowUnwrapRef<{
        tree: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        renderSwitcherIcon(prefixCls: string, switcherIcon: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, { isLeaf, loading, expanded }: {
            isLeaf: any;
            loading: any;
            expanded: any;
        }): JSX.Element;
        updateTreeData(treeData: import("./Tree").TreeDataItem[]): any;
        setTreeRef(node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        handleCheck(checkedObj: import("../_util/type").Key[], eventObj: import("./Tree").CheckEvent): void;
        handleExpand(expandedKeys: import("../_util/type").Key[], eventObj: import("./Tree").ExpendEvent): void;
        handleSelect(selectedKeys: import("../_util/type").Key[], eventObj: import("./Tree").SelectEvent): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    icon: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onDblclick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    onExpand: (...args: any[]) => any;
    "onUpdate:selectedKeys": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    filterAntTreeNode: (...args: any[]) => any;
    filterTreeNode: (...args: any[]) => any;
    replaceFields: {
        [key: string]: any;
    };
    onCheck: (...args: any[]) => any;
    onDoubleclick: (...args: any[]) => any;
    "onUpdate:checkedKeys": (...args: any[]) => any;
    "onUpdate:expandedKeys": (...args: any[]) => any;
} & {
    multiple?: boolean;
    disabled?: boolean;
    showIcon?: boolean;
    selectable?: boolean;
    openAnimation?: any;
    draggable?: boolean;
    selectedKeys?: import("../_util/type").Key[];
    defaultSelectedKeys?: import("../_util/type").Key[];
    checkedKeys?: import("../_util/type").Key[] | {
        checked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
        halfChecked: import("../_util/type").Key[] | (() => import("../_util/type").Key[]);
    };
    treeData?: import("./Tree").TreeDataItem[];
    expandedKeys?: import("../_util/type").Key[];
    autoExpandParent?: boolean;
    loadedKeys?: import("../_util/type").Key[];
    checkable?: boolean;
    blockNode?: boolean;
    showLine?: boolean;
    checkStrictly?: boolean;
    defaultExpandAll?: boolean;
    defaultExpandParent?: boolean;
    defaultExpandedKeys?: import("../_util/type").Key[];
    defaultCheckedKeys?: import("../_util/type").Key[];
    switcherIcon?: any;
}>, {
    tree: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    renderSwitcherIcon(prefixCls: string, switcherIcon: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, { isLeaf, loading, expanded }: {
        isLeaf: any;
        loading: any;
        expanded: any;
    }): JSX.Element;
    updateTreeData(treeData: import("./Tree").TreeDataItem[]): any;
    setTreeRef(node: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    handleCheck(checkedObj: import("../_util/type").Key[], eventObj: import("./Tree").CheckEvent): void;
    handleExpand(expandedKeys: import("../_util/type").Key[], eventObj: import("./Tree").ExpendEvent): void;
    handleSelect(selectedKeys: import("../_util/type").Key[], eventObj: import("./Tree").SelectEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    icon: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onDblclick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    onExpand: (...args: any[]) => any;
    "onUpdate:selectedKeys": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    filterAntTreeNode: (...args: any[]) => any;
    filterTreeNode: (...args: any[]) => any;
    replaceFields: {
        [key: string]: any;
    };
    onCheck: (...args: any[]) => any;
    onDoubleclick: (...args: any[]) => any;
    "onUpdate:checkedKeys": (...args: any[]) => any;
    "onUpdate:expandedKeys": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly TreeNode: any;
    readonly DirectoryTree: typeof DirectoryTree;
});
export default _default;
