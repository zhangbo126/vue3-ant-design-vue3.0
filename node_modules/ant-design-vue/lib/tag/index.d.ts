import { HTMLAttributes, App, PropType, ExtractPropTypes } from 'vue';
import { LiteralUnion } from '../_util/type';
import CheckableTag from './CheckableTag';
declare const tagProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    color: {
        type: PropType<LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>>;
    };
    closable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    closeIcon: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    onClose: {
        type: PropType<(e: MouseEvent) => void>;
    };
    icon: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
};
export declare type TagProps = HTMLAttributes & Partial<ExtractPropTypes<typeof tagProps>>;
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            class: any;
            inlist: any;
        }> & Pick<Readonly<{
            class: any;
            inlist: any;
        } & {
            style?: string | import("vue").CSSProperties;
            icon?: unknown;
            title?: string;
            onCopy?: (payload: ClipboardEvent) => void;
            onCut?: (payload: ClipboardEvent) => void;
            onPaste?: (payload: ClipboardEvent) => void;
            onCompositionend?: (payload: CompositionEvent) => void;
            onCompositionstart?: (payload: CompositionEvent) => void;
            onCompositionupdate?: (payload: CompositionEvent) => void;
            onDrag?: (payload: DragEvent) => void;
            onDragend?: (payload: DragEvent) => void;
            onDragenter?: (payload: DragEvent) => void;
            onDragexit?: (payload: DragEvent) => void;
            onDragleave?: (payload: DragEvent) => void;
            onDragover?: (payload: DragEvent) => void;
            onDragstart?: (payload: DragEvent) => void;
            onDrop?: (payload: DragEvent) => void;
            onFocus?: (payload: FocusEvent) => void;
            onBlur?: (payload: FocusEvent) => void;
            onChange?: (payload: Event) => void;
            onBeforeinput?: (payload: Event) => void;
            onInput?: (payload: Event) => void;
            onReset?: (payload: Event) => void;
            onSubmit?: (payload: Event) => void;
            onInvalid?: (payload: Event) => void;
            onLoad?: (payload: Event) => void;
            onError?: (payload: Event) => void;
            onKeydown?: (payload: KeyboardEvent) => void;
            onKeypress?: (payload: KeyboardEvent) => void;
            onKeyup?: (payload: KeyboardEvent) => void;
            onAuxclick?: (payload: MouseEvent) => void;
            onClick?: (payload: MouseEvent) => void;
            onContextmenu?: (payload: MouseEvent) => void;
            onDblclick?: (payload: MouseEvent) => void;
            onMousedown?: (payload: MouseEvent) => void;
            onMouseenter?: (payload: MouseEvent) => void;
            onMouseleave?: (payload: MouseEvent) => void;
            onMousemove?: (payload: MouseEvent) => void;
            onMouseout?: (payload: MouseEvent) => void;
            onMouseover?: (payload: MouseEvent) => void;
            onMouseup?: (payload: MouseEvent) => void;
            onAbort?: (payload: Event) => void;
            onCanplay?: (payload: Event) => void;
            onCanplaythrough?: (payload: Event) => void;
            onDurationchange?: (payload: Event) => void;
            onEmptied?: (payload: Event) => void;
            onEncrypted?: (payload: Event) => void;
            onEnded?: (payload: Event) => void;
            onLoadeddata?: (payload: Event) => void;
            onLoadedmetadata?: (payload: Event) => void;
            onLoadstart?: (payload: Event) => void;
            onPause?: (payload: Event) => void;
            onPlay?: (payload: Event) => void;
            onPlaying?: (payload: Event) => void;
            onProgress?: (payload: Event) => void;
            onRatechange?: (payload: Event) => void;
            onSeeked?: (payload: Event) => void;
            onSeeking?: (payload: Event) => void;
            onStalled?: (payload: Event) => void;
            onSuspend?: (payload: Event) => void;
            onTimeupdate?: (payload: Event) => void;
            onVolumechange?: (payload: Event) => void;
            onWaiting?: (payload: Event) => void;
            onSelect?: (payload: Event) => void;
            onScroll?: (payload: UIEvent) => void;
            onTouchcancel?: (payload: TouchEvent) => void;
            onTouchend?: (payload: TouchEvent) => void;
            onTouchmove?: (payload: TouchEvent) => void;
            onTouchstart?: (payload: TouchEvent) => void;
            onPointerdown?: (payload: PointerEvent) => void;
            onPointermove?: (payload: PointerEvent) => void;
            onPointerup?: (payload: PointerEvent) => void;
            onPointercancel?: (payload: PointerEvent) => void;
            onPointerenter?: (payload: PointerEvent) => void;
            onPointerleave?: (payload: PointerEvent) => void;
            onPointerover?: (payload: PointerEvent) => void;
            onPointerout?: (payload: PointerEvent) => void;
            onWheel?: (payload: WheelEvent) => void;
            onAnimationstart?: (payload: AnimationEvent) => void;
            onAnimationend?: (payload: AnimationEvent) => void;
            onAnimationiteration?: (payload: AnimationEvent) => void;
            onTransitionend?: (payload: TransitionEvent) => void;
            onTransitionstart?: (payload: TransitionEvent) => void;
            prefixCls?: string;
            role?: string;
            hidden?: boolean;
            visible?: boolean;
            color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
            contextmenu?: string;
            id?: string;
            tabindex?: number;
            placeholder?: string;
            closable?: boolean;
            onClose?: (e: MouseEvent) => void;
            prefix?: string;
            dir?: string;
            innerHTML?: string;
            accesskey?: string;
            contenteditable?: boolean | "inherit" | "false" | "true";
            draggable?: boolean | "false" | "true";
            lang?: string;
            spellcheck?: boolean | "false" | "true";
            translate?: "yes" | "no";
            radiogroup?: string;
            about?: string;
            datatype?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autocave?: string;
            itemprop?: string;
            itemscope?: boolean;
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
            is?: string;
            "aria-activedescendant"?: string;
            "aria-atomic"?: boolean | "false" | "true";
            "aria-autocomplete"?: "none" | "inline" | "both" | "list";
            "aria-busy"?: boolean | "false" | "true";
            "aria-checked"?: boolean | "false" | "true" | "mixed";
            "aria-colcount"?: number;
            "aria-colindex"?: number;
            "aria-colspan"?: number;
            "aria-controls"?: string;
            "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
            "aria-describedby"?: string;
            "aria-details"?: string;
            "aria-disabled"?: boolean | "false" | "true";
            "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
            "aria-errormessage"?: string;
            "aria-expanded"?: boolean | "false" | "true";
            "aria-flowto"?: string;
            "aria-grabbed"?: boolean | "false" | "true";
            "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
            "aria-hidden"?: boolean | "false" | "true";
            "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
            "aria-keyshortcuts"?: string;
            "aria-label"?: string;
            "aria-labelledby"?: string;
            "aria-level"?: number;
            "aria-live"?: "off" | "polite" | "assertive";
            "aria-modal"?: boolean | "false" | "true";
            "aria-multiline"?: boolean | "false" | "true";
            "aria-multiselectable"?: boolean | "false" | "true";
            "aria-orientation"?: "horizontal" | "vertical";
            "aria-owns"?: string;
            "aria-placeholder"?: string;
            "aria-posinset"?: number;
            "aria-pressed"?: boolean | "false" | "true" | "mixed";
            "aria-readonly"?: boolean | "false" | "true";
            "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
            "aria-required"?: boolean | "false" | "true";
            "aria-roledescription"?: string;
            "aria-rowcount"?: number;
            "aria-rowindex"?: number;
            "aria-rowspan"?: number;
            "aria-selected"?: boolean | "false" | "true";
            "aria-setsize"?: number;
            "aria-sort"?: "none" | "ascending" | "descending" | "other";
            "aria-valuemax"?: number;
            "aria-valuemin"?: number;
            "aria-valuenow"?: number;
            "aria-valuetext"?: string;
            closeIcon?: unknown;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "icon" | "title" | "onCopy" | "onCut" | "onPaste" | "onCompositionend" | "onCompositionstart" | "onCompositionupdate" | "onDrag" | "onDragend" | "onDragenter" | "onDragexit" | "onDragleave" | "onDragover" | "onDragstart" | "onDrop" | "onFocus" | "onBlur" | "onChange" | "onBeforeinput" | "onInput" | "onReset" | "onSubmit" | "onInvalid" | "onLoad" | "onError" | "onKeydown" | "onKeypress" | "onKeyup" | "onAuxclick" | "onClick" | "onContextmenu" | "onDblclick" | "onMousedown" | "onMouseenter" | "onMouseleave" | "onMousemove" | "onMouseout" | "onMouseover" | "onMouseup" | "onAbort" | "onCanplay" | "onCanplaythrough" | "onDurationchange" | "onEmptied" | "onEncrypted" | "onEnded" | "onLoadeddata" | "onLoadedmetadata" | "onLoadstart" | "onPause" | "onPlay" | "onPlaying" | "onProgress" | "onRatechange" | "onSeeked" | "onSeeking" | "onStalled" | "onSuspend" | "onTimeupdate" | "onVolumechange" | "onWaiting" | "onSelect" | "onScroll" | "onTouchcancel" | "onTouchend" | "onTouchmove" | "onTouchstart" | "onPointerdown" | "onPointermove" | "onPointerup" | "onPointercancel" | "onPointerenter" | "onPointerleave" | "onPointerover" | "onPointerout" | "onWheel" | "onAnimationstart" | "onAnimationend" | "onAnimationiteration" | "onTransitionend" | "onTransitionstart" | "prefixCls" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "role" | "hidden" | "visible" | "color" | "contextmenu" | "id" | "tabindex" | "placeholder" | "closable" | "onClose" | "prefix" | "dir" | "innerHTML" | "accesskey" | "contenteditable" | "draggable" | "lang" | "spellcheck" | "translate" | "radiogroup" | "about" | "datatype" | "property" | "resource" | "typeof" | "vocab" | "autocapitalize" | "autocorrect" | "autocave" | "itemprop" | "itemscope" | "itemtype" | "itemid" | "itemref" | "results" | "security" | "unselectable" | "inputmode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "closeIcon">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "close" | "update:visible", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            class: any;
            inlist: any;
        } & {
            style?: string | import("vue").CSSProperties;
            icon?: unknown;
            title?: string;
            onCopy?: (payload: ClipboardEvent) => void;
            onCut?: (payload: ClipboardEvent) => void;
            onPaste?: (payload: ClipboardEvent) => void;
            onCompositionend?: (payload: CompositionEvent) => void;
            onCompositionstart?: (payload: CompositionEvent) => void;
            onCompositionupdate?: (payload: CompositionEvent) => void;
            onDrag?: (payload: DragEvent) => void;
            onDragend?: (payload: DragEvent) => void;
            onDragenter?: (payload: DragEvent) => void;
            onDragexit?: (payload: DragEvent) => void;
            onDragleave?: (payload: DragEvent) => void;
            onDragover?: (payload: DragEvent) => void;
            onDragstart?: (payload: DragEvent) => void;
            onDrop?: (payload: DragEvent) => void;
            onFocus?: (payload: FocusEvent) => void;
            onBlur?: (payload: FocusEvent) => void;
            onChange?: (payload: Event) => void;
            onBeforeinput?: (payload: Event) => void;
            onInput?: (payload: Event) => void;
            onReset?: (payload: Event) => void;
            onSubmit?: (payload: Event) => void;
            onInvalid?: (payload: Event) => void;
            onLoad?: (payload: Event) => void;
            onError?: (payload: Event) => void;
            onKeydown?: (payload: KeyboardEvent) => void;
            onKeypress?: (payload: KeyboardEvent) => void;
            onKeyup?: (payload: KeyboardEvent) => void;
            onAuxclick?: (payload: MouseEvent) => void;
            onClick?: (payload: MouseEvent) => void;
            onContextmenu?: (payload: MouseEvent) => void;
            onDblclick?: (payload: MouseEvent) => void;
            onMousedown?: (payload: MouseEvent) => void;
            onMouseenter?: (payload: MouseEvent) => void;
            onMouseleave?: (payload: MouseEvent) => void;
            onMousemove?: (payload: MouseEvent) => void;
            onMouseout?: (payload: MouseEvent) => void;
            onMouseover?: (payload: MouseEvent) => void;
            onMouseup?: (payload: MouseEvent) => void;
            onAbort?: (payload: Event) => void;
            onCanplay?: (payload: Event) => void;
            onCanplaythrough?: (payload: Event) => void;
            onDurationchange?: (payload: Event) => void;
            onEmptied?: (payload: Event) => void;
            onEncrypted?: (payload: Event) => void;
            onEnded?: (payload: Event) => void;
            onLoadeddata?: (payload: Event) => void;
            onLoadedmetadata?: (payload: Event) => void;
            onLoadstart?: (payload: Event) => void;
            onPause?: (payload: Event) => void;
            onPlay?: (payload: Event) => void;
            onPlaying?: (payload: Event) => void;
            onProgress?: (payload: Event) => void;
            onRatechange?: (payload: Event) => void;
            onSeeked?: (payload: Event) => void;
            onSeeking?: (payload: Event) => void;
            onStalled?: (payload: Event) => void;
            onSuspend?: (payload: Event) => void;
            onTimeupdate?: (payload: Event) => void;
            onVolumechange?: (payload: Event) => void;
            onWaiting?: (payload: Event) => void;
            onSelect?: (payload: Event) => void;
            onScroll?: (payload: UIEvent) => void;
            onTouchcancel?: (payload: TouchEvent) => void;
            onTouchend?: (payload: TouchEvent) => void;
            onTouchmove?: (payload: TouchEvent) => void;
            onTouchstart?: (payload: TouchEvent) => void;
            onPointerdown?: (payload: PointerEvent) => void;
            onPointermove?: (payload: PointerEvent) => void;
            onPointerup?: (payload: PointerEvent) => void;
            onPointercancel?: (payload: PointerEvent) => void;
            onPointerenter?: (payload: PointerEvent) => void;
            onPointerleave?: (payload: PointerEvent) => void;
            onPointerover?: (payload: PointerEvent) => void;
            onPointerout?: (payload: PointerEvent) => void;
            onWheel?: (payload: WheelEvent) => void;
            onAnimationstart?: (payload: AnimationEvent) => void;
            onAnimationend?: (payload: AnimationEvent) => void;
            onAnimationiteration?: (payload: AnimationEvent) => void;
            onTransitionend?: (payload: TransitionEvent) => void;
            onTransitionstart?: (payload: TransitionEvent) => void;
            prefixCls?: string;
            role?: string;
            hidden?: boolean;
            visible?: boolean;
            color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
            contextmenu?: string;
            id?: string;
            tabindex?: number;
            placeholder?: string;
            closable?: boolean;
            onClose?: (e: MouseEvent) => void;
            prefix?: string;
            dir?: string;
            innerHTML?: string;
            accesskey?: string;
            contenteditable?: boolean | "inherit" | "false" | "true";
            draggable?: boolean | "false" | "true";
            lang?: string;
            spellcheck?: boolean | "false" | "true";
            translate?: "yes" | "no";
            radiogroup?: string;
            about?: string;
            datatype?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autocave?: string;
            itemprop?: string;
            itemscope?: boolean;
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
            is?: string;
            "aria-activedescendant"?: string;
            "aria-atomic"?: boolean | "false" | "true";
            "aria-autocomplete"?: "none" | "inline" | "both" | "list";
            "aria-busy"?: boolean | "false" | "true";
            "aria-checked"?: boolean | "false" | "true" | "mixed";
            "aria-colcount"?: number;
            "aria-colindex"?: number;
            "aria-colspan"?: number;
            "aria-controls"?: string;
            "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
            "aria-describedby"?: string;
            "aria-details"?: string;
            "aria-disabled"?: boolean | "false" | "true";
            "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
            "aria-errormessage"?: string;
            "aria-expanded"?: boolean | "false" | "true";
            "aria-flowto"?: string;
            "aria-grabbed"?: boolean | "false" | "true";
            "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
            "aria-hidden"?: boolean | "false" | "true";
            "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
            "aria-keyshortcuts"?: string;
            "aria-label"?: string;
            "aria-labelledby"?: string;
            "aria-level"?: number;
            "aria-live"?: "off" | "polite" | "assertive";
            "aria-modal"?: boolean | "false" | "true";
            "aria-multiline"?: boolean | "false" | "true";
            "aria-multiselectable"?: boolean | "false" | "true";
            "aria-orientation"?: "horizontal" | "vertical";
            "aria-owns"?: string;
            "aria-placeholder"?: string;
            "aria-posinset"?: number;
            "aria-pressed"?: boolean | "false" | "true" | "mixed";
            "aria-readonly"?: boolean | "false" | "true";
            "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
            "aria-required"?: boolean | "false" | "true";
            "aria-roledescription"?: string;
            "aria-rowcount"?: number;
            "aria-rowindex"?: number;
            "aria-rowspan"?: number;
            "aria-selected"?: boolean | "false" | "true";
            "aria-setsize"?: number;
            "aria-sort"?: "none" | "ascending" | "descending" | "other";
            "aria-valuemax"?: number;
            "aria-valuemin"?: number;
            "aria-valuenow"?: number;
            "aria-valuetext"?: string;
            closeIcon?: unknown;
        }>, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:visible")[], string, {
            class: any;
            inlist: any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        class: any;
        inlist: any;
    } & {
        style?: string | import("vue").CSSProperties;
        icon?: unknown;
        title?: string;
        onCopy?: (payload: ClipboardEvent) => void;
        onCut?: (payload: ClipboardEvent) => void;
        onPaste?: (payload: ClipboardEvent) => void;
        onCompositionend?: (payload: CompositionEvent) => void;
        onCompositionstart?: (payload: CompositionEvent) => void;
        onCompositionupdate?: (payload: CompositionEvent) => void;
        onDrag?: (payload: DragEvent) => void;
        onDragend?: (payload: DragEvent) => void;
        onDragenter?: (payload: DragEvent) => void;
        onDragexit?: (payload: DragEvent) => void;
        onDragleave?: (payload: DragEvent) => void;
        onDragover?: (payload: DragEvent) => void;
        onDragstart?: (payload: DragEvent) => void;
        onDrop?: (payload: DragEvent) => void;
        onFocus?: (payload: FocusEvent) => void;
        onBlur?: (payload: FocusEvent) => void;
        onChange?: (payload: Event) => void;
        onBeforeinput?: (payload: Event) => void;
        onInput?: (payload: Event) => void;
        onReset?: (payload: Event) => void;
        onSubmit?: (payload: Event) => void;
        onInvalid?: (payload: Event) => void;
        onLoad?: (payload: Event) => void;
        onError?: (payload: Event) => void;
        onKeydown?: (payload: KeyboardEvent) => void;
        onKeypress?: (payload: KeyboardEvent) => void;
        onKeyup?: (payload: KeyboardEvent) => void;
        onAuxclick?: (payload: MouseEvent) => void;
        onClick?: (payload: MouseEvent) => void;
        onContextmenu?: (payload: MouseEvent) => void;
        onDblclick?: (payload: MouseEvent) => void;
        onMousedown?: (payload: MouseEvent) => void;
        onMouseenter?: (payload: MouseEvent) => void;
        onMouseleave?: (payload: MouseEvent) => void;
        onMousemove?: (payload: MouseEvent) => void;
        onMouseout?: (payload: MouseEvent) => void;
        onMouseover?: (payload: MouseEvent) => void;
        onMouseup?: (payload: MouseEvent) => void;
        onAbort?: (payload: Event) => void;
        onCanplay?: (payload: Event) => void;
        onCanplaythrough?: (payload: Event) => void;
        onDurationchange?: (payload: Event) => void;
        onEmptied?: (payload: Event) => void;
        onEncrypted?: (payload: Event) => void;
        onEnded?: (payload: Event) => void;
        onLoadeddata?: (payload: Event) => void;
        onLoadedmetadata?: (payload: Event) => void;
        onLoadstart?: (payload: Event) => void;
        onPause?: (payload: Event) => void;
        onPlay?: (payload: Event) => void;
        onPlaying?: (payload: Event) => void;
        onProgress?: (payload: Event) => void;
        onRatechange?: (payload: Event) => void;
        onSeeked?: (payload: Event) => void;
        onSeeking?: (payload: Event) => void;
        onStalled?: (payload: Event) => void;
        onSuspend?: (payload: Event) => void;
        onTimeupdate?: (payload: Event) => void;
        onVolumechange?: (payload: Event) => void;
        onWaiting?: (payload: Event) => void;
        onSelect?: (payload: Event) => void;
        onScroll?: (payload: UIEvent) => void;
        onTouchcancel?: (payload: TouchEvent) => void;
        onTouchend?: (payload: TouchEvent) => void;
        onTouchmove?: (payload: TouchEvent) => void;
        onTouchstart?: (payload: TouchEvent) => void;
        onPointerdown?: (payload: PointerEvent) => void;
        onPointermove?: (payload: PointerEvent) => void;
        onPointerup?: (payload: PointerEvent) => void;
        onPointercancel?: (payload: PointerEvent) => void;
        onPointerenter?: (payload: PointerEvent) => void;
        onPointerleave?: (payload: PointerEvent) => void;
        onPointerover?: (payload: PointerEvent) => void;
        onPointerout?: (payload: PointerEvent) => void;
        onWheel?: (payload: WheelEvent) => void;
        onAnimationstart?: (payload: AnimationEvent) => void;
        onAnimationend?: (payload: AnimationEvent) => void;
        onAnimationiteration?: (payload: AnimationEvent) => void;
        onTransitionend?: (payload: TransitionEvent) => void;
        onTransitionstart?: (payload: TransitionEvent) => void;
        prefixCls?: string;
        role?: string;
        hidden?: boolean;
        visible?: boolean;
        color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
        contextmenu?: string;
        id?: string;
        tabindex?: number;
        placeholder?: string;
        closable?: boolean;
        onClose?: (e: MouseEvent) => void;
        prefix?: string;
        dir?: string;
        innerHTML?: string;
        accesskey?: string;
        contenteditable?: boolean | "inherit" | "false" | "true";
        draggable?: boolean | "false" | "true";
        lang?: string;
        spellcheck?: boolean | "false" | "true";
        translate?: "yes" | "no";
        radiogroup?: string;
        about?: string;
        datatype?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autocapitalize?: string;
        autocorrect?: string;
        autocave?: string;
        itemprop?: string;
        itemscope?: boolean;
        itemtype?: string;
        itemid?: string;
        itemref?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        "aria-activedescendant"?: string;
        "aria-atomic"?: boolean | "false" | "true";
        "aria-autocomplete"?: "none" | "inline" | "both" | "list";
        "aria-busy"?: boolean | "false" | "true";
        "aria-checked"?: boolean | "false" | "true" | "mixed";
        "aria-colcount"?: number;
        "aria-colindex"?: number;
        "aria-colspan"?: number;
        "aria-controls"?: string;
        "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
        "aria-describedby"?: string;
        "aria-details"?: string;
        "aria-disabled"?: boolean | "false" | "true";
        "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
        "aria-errormessage"?: string;
        "aria-expanded"?: boolean | "false" | "true";
        "aria-flowto"?: string;
        "aria-grabbed"?: boolean | "false" | "true";
        "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
        "aria-hidden"?: boolean | "false" | "true";
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
        "aria-keyshortcuts"?: string;
        "aria-label"?: string;
        "aria-labelledby"?: string;
        "aria-level"?: number;
        "aria-live"?: "off" | "polite" | "assertive";
        "aria-modal"?: boolean | "false" | "true";
        "aria-multiline"?: boolean | "false" | "true";
        "aria-multiselectable"?: boolean | "false" | "true";
        "aria-orientation"?: "horizontal" | "vertical";
        "aria-owns"?: string;
        "aria-placeholder"?: string;
        "aria-posinset"?: number;
        "aria-pressed"?: boolean | "false" | "true" | "mixed";
        "aria-readonly"?: boolean | "false" | "true";
        "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
        "aria-required"?: boolean | "false" | "true";
        "aria-roledescription"?: string;
        "aria-rowcount"?: number;
        "aria-rowindex"?: number;
        "aria-rowspan"?: number;
        "aria-selected"?: boolean | "false" | "true";
        "aria-setsize"?: number;
        "aria-sort"?: "none" | "ascending" | "descending" | "other";
        "aria-valuemax"?: number;
        "aria-valuemin"?: number;
        "aria-valuenow"?: number;
        "aria-valuetext"?: string;
        closeIcon?: unknown;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    class: any;
    inlist: any;
} & {
    style?: string | import("vue").CSSProperties;
    icon?: unknown;
    title?: string;
    onCopy?: (payload: ClipboardEvent) => void;
    onCut?: (payload: ClipboardEvent) => void;
    onPaste?: (payload: ClipboardEvent) => void;
    onCompositionend?: (payload: CompositionEvent) => void;
    onCompositionstart?: (payload: CompositionEvent) => void;
    onCompositionupdate?: (payload: CompositionEvent) => void;
    onDrag?: (payload: DragEvent) => void;
    onDragend?: (payload: DragEvent) => void;
    onDragenter?: (payload: DragEvent) => void;
    onDragexit?: (payload: DragEvent) => void;
    onDragleave?: (payload: DragEvent) => void;
    onDragover?: (payload: DragEvent) => void;
    onDragstart?: (payload: DragEvent) => void;
    onDrop?: (payload: DragEvent) => void;
    onFocus?: (payload: FocusEvent) => void;
    onBlur?: (payload: FocusEvent) => void;
    onChange?: (payload: Event) => void;
    onBeforeinput?: (payload: Event) => void;
    onInput?: (payload: Event) => void;
    onReset?: (payload: Event) => void;
    onSubmit?: (payload: Event) => void;
    onInvalid?: (payload: Event) => void;
    onLoad?: (payload: Event) => void;
    onError?: (payload: Event) => void;
    onKeydown?: (payload: KeyboardEvent) => void;
    onKeypress?: (payload: KeyboardEvent) => void;
    onKeyup?: (payload: KeyboardEvent) => void;
    onAuxclick?: (payload: MouseEvent) => void;
    onClick?: (payload: MouseEvent) => void;
    onContextmenu?: (payload: MouseEvent) => void;
    onDblclick?: (payload: MouseEvent) => void;
    onMousedown?: (payload: MouseEvent) => void;
    onMouseenter?: (payload: MouseEvent) => void;
    onMouseleave?: (payload: MouseEvent) => void;
    onMousemove?: (payload: MouseEvent) => void;
    onMouseout?: (payload: MouseEvent) => void;
    onMouseover?: (payload: MouseEvent) => void;
    onMouseup?: (payload: MouseEvent) => void;
    onAbort?: (payload: Event) => void;
    onCanplay?: (payload: Event) => void;
    onCanplaythrough?: (payload: Event) => void;
    onDurationchange?: (payload: Event) => void;
    onEmptied?: (payload: Event) => void;
    onEncrypted?: (payload: Event) => void;
    onEnded?: (payload: Event) => void;
    onLoadeddata?: (payload: Event) => void;
    onLoadedmetadata?: (payload: Event) => void;
    onLoadstart?: (payload: Event) => void;
    onPause?: (payload: Event) => void;
    onPlay?: (payload: Event) => void;
    onPlaying?: (payload: Event) => void;
    onProgress?: (payload: Event) => void;
    onRatechange?: (payload: Event) => void;
    onSeeked?: (payload: Event) => void;
    onSeeking?: (payload: Event) => void;
    onStalled?: (payload: Event) => void;
    onSuspend?: (payload: Event) => void;
    onTimeupdate?: (payload: Event) => void;
    onVolumechange?: (payload: Event) => void;
    onWaiting?: (payload: Event) => void;
    onSelect?: (payload: Event) => void;
    onScroll?: (payload: UIEvent) => void;
    onTouchcancel?: (payload: TouchEvent) => void;
    onTouchend?: (payload: TouchEvent) => void;
    onTouchmove?: (payload: TouchEvent) => void;
    onTouchstart?: (payload: TouchEvent) => void;
    onPointerdown?: (payload: PointerEvent) => void;
    onPointermove?: (payload: PointerEvent) => void;
    onPointerup?: (payload: PointerEvent) => void;
    onPointercancel?: (payload: PointerEvent) => void;
    onPointerenter?: (payload: PointerEvent) => void;
    onPointerleave?: (payload: PointerEvent) => void;
    onPointerover?: (payload: PointerEvent) => void;
    onPointerout?: (payload: PointerEvent) => void;
    onWheel?: (payload: WheelEvent) => void;
    onAnimationstart?: (payload: AnimationEvent) => void;
    onAnimationend?: (payload: AnimationEvent) => void;
    onAnimationiteration?: (payload: AnimationEvent) => void;
    onTransitionend?: (payload: TransitionEvent) => void;
    onTransitionstart?: (payload: TransitionEvent) => void;
    prefixCls?: string;
    role?: string;
    hidden?: boolean;
    visible?: boolean;
    color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
    contextmenu?: string;
    id?: string;
    tabindex?: number;
    placeholder?: string;
    closable?: boolean;
    onClose?: (e: MouseEvent) => void;
    prefix?: string;
    dir?: string;
    innerHTML?: string;
    accesskey?: string;
    contenteditable?: boolean | "inherit" | "false" | "true";
    draggable?: boolean | "false" | "true";
    lang?: string;
    spellcheck?: boolean | "false" | "true";
    translate?: "yes" | "no";
    radiogroup?: string;
    about?: string;
    datatype?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autocapitalize?: string;
    autocorrect?: string;
    autocave?: string;
    itemprop?: string;
    itemscope?: boolean;
    itemtype?: string;
    itemid?: string;
    itemref?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "inline" | "both" | "list";
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "false" | "true" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "polite" | "assertive";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "false" | "true" | "mixed";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    closeIcon?: unknown;
}>, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:visible")[], "close" | "update:visible", {
    class: any;
    inlist: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly CheckableTag: typeof CheckableTag;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            class: any;
            inlist: any;
        }> & Pick<Readonly<{
            class: any;
            inlist: any;
        } & {
            style?: string | import("vue").CSSProperties;
            icon?: unknown;
            title?: string;
            onCopy?: (payload: ClipboardEvent) => void;
            onCut?: (payload: ClipboardEvent) => void;
            onPaste?: (payload: ClipboardEvent) => void;
            onCompositionend?: (payload: CompositionEvent) => void;
            onCompositionstart?: (payload: CompositionEvent) => void;
            onCompositionupdate?: (payload: CompositionEvent) => void;
            onDrag?: (payload: DragEvent) => void;
            onDragend?: (payload: DragEvent) => void;
            onDragenter?: (payload: DragEvent) => void;
            onDragexit?: (payload: DragEvent) => void;
            onDragleave?: (payload: DragEvent) => void;
            onDragover?: (payload: DragEvent) => void;
            onDragstart?: (payload: DragEvent) => void;
            onDrop?: (payload: DragEvent) => void;
            onFocus?: (payload: FocusEvent) => void;
            onBlur?: (payload: FocusEvent) => void;
            onChange?: (payload: Event) => void;
            onBeforeinput?: (payload: Event) => void;
            onInput?: (payload: Event) => void;
            onReset?: (payload: Event) => void;
            onSubmit?: (payload: Event) => void;
            onInvalid?: (payload: Event) => void;
            onLoad?: (payload: Event) => void;
            onError?: (payload: Event) => void;
            onKeydown?: (payload: KeyboardEvent) => void;
            onKeypress?: (payload: KeyboardEvent) => void;
            onKeyup?: (payload: KeyboardEvent) => void;
            onAuxclick?: (payload: MouseEvent) => void;
            onClick?: (payload: MouseEvent) => void;
            onContextmenu?: (payload: MouseEvent) => void;
            onDblclick?: (payload: MouseEvent) => void;
            onMousedown?: (payload: MouseEvent) => void;
            onMouseenter?: (payload: MouseEvent) => void;
            onMouseleave?: (payload: MouseEvent) => void;
            onMousemove?: (payload: MouseEvent) => void;
            onMouseout?: (payload: MouseEvent) => void;
            onMouseover?: (payload: MouseEvent) => void;
            onMouseup?: (payload: MouseEvent) => void;
            onAbort?: (payload: Event) => void;
            onCanplay?: (payload: Event) => void;
            onCanplaythrough?: (payload: Event) => void;
            onDurationchange?: (payload: Event) => void;
            onEmptied?: (payload: Event) => void;
            onEncrypted?: (payload: Event) => void;
            onEnded?: (payload: Event) => void;
            onLoadeddata?: (payload: Event) => void;
            onLoadedmetadata?: (payload: Event) => void;
            onLoadstart?: (payload: Event) => void;
            onPause?: (payload: Event) => void;
            onPlay?: (payload: Event) => void;
            onPlaying?: (payload: Event) => void;
            onProgress?: (payload: Event) => void;
            onRatechange?: (payload: Event) => void;
            onSeeked?: (payload: Event) => void;
            onSeeking?: (payload: Event) => void;
            onStalled?: (payload: Event) => void;
            onSuspend?: (payload: Event) => void;
            onTimeupdate?: (payload: Event) => void;
            onVolumechange?: (payload: Event) => void;
            onWaiting?: (payload: Event) => void;
            onSelect?: (payload: Event) => void;
            onScroll?: (payload: UIEvent) => void;
            onTouchcancel?: (payload: TouchEvent) => void;
            onTouchend?: (payload: TouchEvent) => void;
            onTouchmove?: (payload: TouchEvent) => void;
            onTouchstart?: (payload: TouchEvent) => void;
            onPointerdown?: (payload: PointerEvent) => void;
            onPointermove?: (payload: PointerEvent) => void;
            onPointerup?: (payload: PointerEvent) => void;
            onPointercancel?: (payload: PointerEvent) => void;
            onPointerenter?: (payload: PointerEvent) => void;
            onPointerleave?: (payload: PointerEvent) => void;
            onPointerover?: (payload: PointerEvent) => void;
            onPointerout?: (payload: PointerEvent) => void;
            onWheel?: (payload: WheelEvent) => void;
            onAnimationstart?: (payload: AnimationEvent) => void;
            onAnimationend?: (payload: AnimationEvent) => void;
            onAnimationiteration?: (payload: AnimationEvent) => void;
            onTransitionend?: (payload: TransitionEvent) => void;
            onTransitionstart?: (payload: TransitionEvent) => void;
            prefixCls?: string;
            role?: string;
            hidden?: boolean;
            visible?: boolean;
            color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
            contextmenu?: string;
            id?: string;
            tabindex?: number;
            placeholder?: string;
            closable?: boolean;
            onClose?: (e: MouseEvent) => void;
            prefix?: string;
            dir?: string;
            innerHTML?: string;
            accesskey?: string;
            contenteditable?: boolean | "inherit" | "false" | "true";
            draggable?: boolean | "false" | "true";
            lang?: string;
            spellcheck?: boolean | "false" | "true";
            translate?: "yes" | "no";
            radiogroup?: string;
            about?: string;
            datatype?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autocave?: string;
            itemprop?: string;
            itemscope?: boolean;
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
            is?: string;
            "aria-activedescendant"?: string;
            "aria-atomic"?: boolean | "false" | "true";
            "aria-autocomplete"?: "none" | "inline" | "both" | "list";
            "aria-busy"?: boolean | "false" | "true";
            "aria-checked"?: boolean | "false" | "true" | "mixed";
            "aria-colcount"?: number;
            "aria-colindex"?: number;
            "aria-colspan"?: number;
            "aria-controls"?: string;
            "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
            "aria-describedby"?: string;
            "aria-details"?: string;
            "aria-disabled"?: boolean | "false" | "true";
            "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
            "aria-errormessage"?: string;
            "aria-expanded"?: boolean | "false" | "true";
            "aria-flowto"?: string;
            "aria-grabbed"?: boolean | "false" | "true";
            "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
            "aria-hidden"?: boolean | "false" | "true";
            "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
            "aria-keyshortcuts"?: string;
            "aria-label"?: string;
            "aria-labelledby"?: string;
            "aria-level"?: number;
            "aria-live"?: "off" | "polite" | "assertive";
            "aria-modal"?: boolean | "false" | "true";
            "aria-multiline"?: boolean | "false" | "true";
            "aria-multiselectable"?: boolean | "false" | "true";
            "aria-orientation"?: "horizontal" | "vertical";
            "aria-owns"?: string;
            "aria-placeholder"?: string;
            "aria-posinset"?: number;
            "aria-pressed"?: boolean | "false" | "true" | "mixed";
            "aria-readonly"?: boolean | "false" | "true";
            "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
            "aria-required"?: boolean | "false" | "true";
            "aria-roledescription"?: string;
            "aria-rowcount"?: number;
            "aria-rowindex"?: number;
            "aria-rowspan"?: number;
            "aria-selected"?: boolean | "false" | "true";
            "aria-setsize"?: number;
            "aria-sort"?: "none" | "ascending" | "descending" | "other";
            "aria-valuemax"?: number;
            "aria-valuemin"?: number;
            "aria-valuenow"?: number;
            "aria-valuetext"?: string;
            closeIcon?: unknown;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "icon" | "title" | "onCopy" | "onCut" | "onPaste" | "onCompositionend" | "onCompositionstart" | "onCompositionupdate" | "onDrag" | "onDragend" | "onDragenter" | "onDragexit" | "onDragleave" | "onDragover" | "onDragstart" | "onDrop" | "onFocus" | "onBlur" | "onChange" | "onBeforeinput" | "onInput" | "onReset" | "onSubmit" | "onInvalid" | "onLoad" | "onError" | "onKeydown" | "onKeypress" | "onKeyup" | "onAuxclick" | "onClick" | "onContextmenu" | "onDblclick" | "onMousedown" | "onMouseenter" | "onMouseleave" | "onMousemove" | "onMouseout" | "onMouseover" | "onMouseup" | "onAbort" | "onCanplay" | "onCanplaythrough" | "onDurationchange" | "onEmptied" | "onEncrypted" | "onEnded" | "onLoadeddata" | "onLoadedmetadata" | "onLoadstart" | "onPause" | "onPlay" | "onPlaying" | "onProgress" | "onRatechange" | "onSeeked" | "onSeeking" | "onStalled" | "onSuspend" | "onTimeupdate" | "onVolumechange" | "onWaiting" | "onSelect" | "onScroll" | "onTouchcancel" | "onTouchend" | "onTouchmove" | "onTouchstart" | "onPointerdown" | "onPointermove" | "onPointerup" | "onPointercancel" | "onPointerenter" | "onPointerleave" | "onPointerover" | "onPointerout" | "onWheel" | "onAnimationstart" | "onAnimationend" | "onAnimationiteration" | "onTransitionend" | "onTransitionstart" | "prefixCls" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "role" | "hidden" | "visible" | "color" | "contextmenu" | "id" | "tabindex" | "placeholder" | "closable" | "onClose" | "prefix" | "dir" | "innerHTML" | "accesskey" | "contenteditable" | "draggable" | "lang" | "spellcheck" | "translate" | "radiogroup" | "about" | "datatype" | "property" | "resource" | "typeof" | "vocab" | "autocapitalize" | "autocorrect" | "autocave" | "itemprop" | "itemscope" | "itemtype" | "itemid" | "itemref" | "results" | "security" | "unselectable" | "inputmode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "closeIcon">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "close" | "update:visible", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            class: any;
            inlist: any;
        } & {
            style?: string | import("vue").CSSProperties;
            icon?: unknown;
            title?: string;
            onCopy?: (payload: ClipboardEvent) => void;
            onCut?: (payload: ClipboardEvent) => void;
            onPaste?: (payload: ClipboardEvent) => void;
            onCompositionend?: (payload: CompositionEvent) => void;
            onCompositionstart?: (payload: CompositionEvent) => void;
            onCompositionupdate?: (payload: CompositionEvent) => void;
            onDrag?: (payload: DragEvent) => void;
            onDragend?: (payload: DragEvent) => void;
            onDragenter?: (payload: DragEvent) => void;
            onDragexit?: (payload: DragEvent) => void;
            onDragleave?: (payload: DragEvent) => void;
            onDragover?: (payload: DragEvent) => void;
            onDragstart?: (payload: DragEvent) => void;
            onDrop?: (payload: DragEvent) => void;
            onFocus?: (payload: FocusEvent) => void;
            onBlur?: (payload: FocusEvent) => void;
            onChange?: (payload: Event) => void;
            onBeforeinput?: (payload: Event) => void;
            onInput?: (payload: Event) => void;
            onReset?: (payload: Event) => void;
            onSubmit?: (payload: Event) => void;
            onInvalid?: (payload: Event) => void;
            onLoad?: (payload: Event) => void;
            onError?: (payload: Event) => void;
            onKeydown?: (payload: KeyboardEvent) => void;
            onKeypress?: (payload: KeyboardEvent) => void;
            onKeyup?: (payload: KeyboardEvent) => void;
            onAuxclick?: (payload: MouseEvent) => void;
            onClick?: (payload: MouseEvent) => void;
            onContextmenu?: (payload: MouseEvent) => void;
            onDblclick?: (payload: MouseEvent) => void;
            onMousedown?: (payload: MouseEvent) => void;
            onMouseenter?: (payload: MouseEvent) => void;
            onMouseleave?: (payload: MouseEvent) => void;
            onMousemove?: (payload: MouseEvent) => void;
            onMouseout?: (payload: MouseEvent) => void;
            onMouseover?: (payload: MouseEvent) => void;
            onMouseup?: (payload: MouseEvent) => void;
            onAbort?: (payload: Event) => void;
            onCanplay?: (payload: Event) => void;
            onCanplaythrough?: (payload: Event) => void;
            onDurationchange?: (payload: Event) => void;
            onEmptied?: (payload: Event) => void;
            onEncrypted?: (payload: Event) => void;
            onEnded?: (payload: Event) => void;
            onLoadeddata?: (payload: Event) => void;
            onLoadedmetadata?: (payload: Event) => void;
            onLoadstart?: (payload: Event) => void;
            onPause?: (payload: Event) => void;
            onPlay?: (payload: Event) => void;
            onPlaying?: (payload: Event) => void;
            onProgress?: (payload: Event) => void;
            onRatechange?: (payload: Event) => void;
            onSeeked?: (payload: Event) => void;
            onSeeking?: (payload: Event) => void;
            onStalled?: (payload: Event) => void;
            onSuspend?: (payload: Event) => void;
            onTimeupdate?: (payload: Event) => void;
            onVolumechange?: (payload: Event) => void;
            onWaiting?: (payload: Event) => void;
            onSelect?: (payload: Event) => void;
            onScroll?: (payload: UIEvent) => void;
            onTouchcancel?: (payload: TouchEvent) => void;
            onTouchend?: (payload: TouchEvent) => void;
            onTouchmove?: (payload: TouchEvent) => void;
            onTouchstart?: (payload: TouchEvent) => void;
            onPointerdown?: (payload: PointerEvent) => void;
            onPointermove?: (payload: PointerEvent) => void;
            onPointerup?: (payload: PointerEvent) => void;
            onPointercancel?: (payload: PointerEvent) => void;
            onPointerenter?: (payload: PointerEvent) => void;
            onPointerleave?: (payload: PointerEvent) => void;
            onPointerover?: (payload: PointerEvent) => void;
            onPointerout?: (payload: PointerEvent) => void;
            onWheel?: (payload: WheelEvent) => void;
            onAnimationstart?: (payload: AnimationEvent) => void;
            onAnimationend?: (payload: AnimationEvent) => void;
            onAnimationiteration?: (payload: AnimationEvent) => void;
            onTransitionend?: (payload: TransitionEvent) => void;
            onTransitionstart?: (payload: TransitionEvent) => void;
            prefixCls?: string;
            role?: string;
            hidden?: boolean;
            visible?: boolean;
            color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
            contextmenu?: string;
            id?: string;
            tabindex?: number;
            placeholder?: string;
            closable?: boolean;
            onClose?: (e: MouseEvent) => void;
            prefix?: string;
            dir?: string;
            innerHTML?: string;
            accesskey?: string;
            contenteditable?: boolean | "inherit" | "false" | "true";
            draggable?: boolean | "false" | "true";
            lang?: string;
            spellcheck?: boolean | "false" | "true";
            translate?: "yes" | "no";
            radiogroup?: string;
            about?: string;
            datatype?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autocave?: string;
            itemprop?: string;
            itemscope?: boolean;
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
            is?: string;
            "aria-activedescendant"?: string;
            "aria-atomic"?: boolean | "false" | "true";
            "aria-autocomplete"?: "none" | "inline" | "both" | "list";
            "aria-busy"?: boolean | "false" | "true";
            "aria-checked"?: boolean | "false" | "true" | "mixed";
            "aria-colcount"?: number;
            "aria-colindex"?: number;
            "aria-colspan"?: number;
            "aria-controls"?: string;
            "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
            "aria-describedby"?: string;
            "aria-details"?: string;
            "aria-disabled"?: boolean | "false" | "true";
            "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
            "aria-errormessage"?: string;
            "aria-expanded"?: boolean | "false" | "true";
            "aria-flowto"?: string;
            "aria-grabbed"?: boolean | "false" | "true";
            "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
            "aria-hidden"?: boolean | "false" | "true";
            "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
            "aria-keyshortcuts"?: string;
            "aria-label"?: string;
            "aria-labelledby"?: string;
            "aria-level"?: number;
            "aria-live"?: "off" | "polite" | "assertive";
            "aria-modal"?: boolean | "false" | "true";
            "aria-multiline"?: boolean | "false" | "true";
            "aria-multiselectable"?: boolean | "false" | "true";
            "aria-orientation"?: "horizontal" | "vertical";
            "aria-owns"?: string;
            "aria-placeholder"?: string;
            "aria-posinset"?: number;
            "aria-pressed"?: boolean | "false" | "true" | "mixed";
            "aria-readonly"?: boolean | "false" | "true";
            "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
            "aria-required"?: boolean | "false" | "true";
            "aria-roledescription"?: string;
            "aria-rowcount"?: number;
            "aria-rowindex"?: number;
            "aria-rowspan"?: number;
            "aria-selected"?: boolean | "false" | "true";
            "aria-setsize"?: number;
            "aria-sort"?: "none" | "ascending" | "descending" | "other";
            "aria-valuemax"?: number;
            "aria-valuemin"?: number;
            "aria-valuenow"?: number;
            "aria-valuetext"?: string;
            closeIcon?: unknown;
        }>, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:visible")[], string, {
            class: any;
            inlist: any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        class: any;
        inlist: any;
    } & {
        style?: string | import("vue").CSSProperties;
        icon?: unknown;
        title?: string;
        onCopy?: (payload: ClipboardEvent) => void;
        onCut?: (payload: ClipboardEvent) => void;
        onPaste?: (payload: ClipboardEvent) => void;
        onCompositionend?: (payload: CompositionEvent) => void;
        onCompositionstart?: (payload: CompositionEvent) => void;
        onCompositionupdate?: (payload: CompositionEvent) => void;
        onDrag?: (payload: DragEvent) => void;
        onDragend?: (payload: DragEvent) => void;
        onDragenter?: (payload: DragEvent) => void;
        onDragexit?: (payload: DragEvent) => void;
        onDragleave?: (payload: DragEvent) => void;
        onDragover?: (payload: DragEvent) => void;
        onDragstart?: (payload: DragEvent) => void;
        onDrop?: (payload: DragEvent) => void;
        onFocus?: (payload: FocusEvent) => void;
        onBlur?: (payload: FocusEvent) => void;
        onChange?: (payload: Event) => void;
        onBeforeinput?: (payload: Event) => void;
        onInput?: (payload: Event) => void;
        onReset?: (payload: Event) => void;
        onSubmit?: (payload: Event) => void;
        onInvalid?: (payload: Event) => void;
        onLoad?: (payload: Event) => void;
        onError?: (payload: Event) => void;
        onKeydown?: (payload: KeyboardEvent) => void;
        onKeypress?: (payload: KeyboardEvent) => void;
        onKeyup?: (payload: KeyboardEvent) => void;
        onAuxclick?: (payload: MouseEvent) => void;
        onClick?: (payload: MouseEvent) => void;
        onContextmenu?: (payload: MouseEvent) => void;
        onDblclick?: (payload: MouseEvent) => void;
        onMousedown?: (payload: MouseEvent) => void;
        onMouseenter?: (payload: MouseEvent) => void;
        onMouseleave?: (payload: MouseEvent) => void;
        onMousemove?: (payload: MouseEvent) => void;
        onMouseout?: (payload: MouseEvent) => void;
        onMouseover?: (payload: MouseEvent) => void;
        onMouseup?: (payload: MouseEvent) => void;
        onAbort?: (payload: Event) => void;
        onCanplay?: (payload: Event) => void;
        onCanplaythrough?: (payload: Event) => void;
        onDurationchange?: (payload: Event) => void;
        onEmptied?: (payload: Event) => void;
        onEncrypted?: (payload: Event) => void;
        onEnded?: (payload: Event) => void;
        onLoadeddata?: (payload: Event) => void;
        onLoadedmetadata?: (payload: Event) => void;
        onLoadstart?: (payload: Event) => void;
        onPause?: (payload: Event) => void;
        onPlay?: (payload: Event) => void;
        onPlaying?: (payload: Event) => void;
        onProgress?: (payload: Event) => void;
        onRatechange?: (payload: Event) => void;
        onSeeked?: (payload: Event) => void;
        onSeeking?: (payload: Event) => void;
        onStalled?: (payload: Event) => void;
        onSuspend?: (payload: Event) => void;
        onTimeupdate?: (payload: Event) => void;
        onVolumechange?: (payload: Event) => void;
        onWaiting?: (payload: Event) => void;
        onSelect?: (payload: Event) => void;
        onScroll?: (payload: UIEvent) => void;
        onTouchcancel?: (payload: TouchEvent) => void;
        onTouchend?: (payload: TouchEvent) => void;
        onTouchmove?: (payload: TouchEvent) => void;
        onTouchstart?: (payload: TouchEvent) => void;
        onPointerdown?: (payload: PointerEvent) => void;
        onPointermove?: (payload: PointerEvent) => void;
        onPointerup?: (payload: PointerEvent) => void;
        onPointercancel?: (payload: PointerEvent) => void;
        onPointerenter?: (payload: PointerEvent) => void;
        onPointerleave?: (payload: PointerEvent) => void;
        onPointerover?: (payload: PointerEvent) => void;
        onPointerout?: (payload: PointerEvent) => void;
        onWheel?: (payload: WheelEvent) => void;
        onAnimationstart?: (payload: AnimationEvent) => void;
        onAnimationend?: (payload: AnimationEvent) => void;
        onAnimationiteration?: (payload: AnimationEvent) => void;
        onTransitionend?: (payload: TransitionEvent) => void;
        onTransitionstart?: (payload: TransitionEvent) => void;
        prefixCls?: string;
        role?: string;
        hidden?: boolean;
        visible?: boolean;
        color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
        contextmenu?: string;
        id?: string;
        tabindex?: number;
        placeholder?: string;
        closable?: boolean;
        onClose?: (e: MouseEvent) => void;
        prefix?: string;
        dir?: string;
        innerHTML?: string;
        accesskey?: string;
        contenteditable?: boolean | "inherit" | "false" | "true";
        draggable?: boolean | "false" | "true";
        lang?: string;
        spellcheck?: boolean | "false" | "true";
        translate?: "yes" | "no";
        radiogroup?: string;
        about?: string;
        datatype?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autocapitalize?: string;
        autocorrect?: string;
        autocave?: string;
        itemprop?: string;
        itemscope?: boolean;
        itemtype?: string;
        itemid?: string;
        itemref?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
        is?: string;
        "aria-activedescendant"?: string;
        "aria-atomic"?: boolean | "false" | "true";
        "aria-autocomplete"?: "none" | "inline" | "both" | "list";
        "aria-busy"?: boolean | "false" | "true";
        "aria-checked"?: boolean | "false" | "true" | "mixed";
        "aria-colcount"?: number;
        "aria-colindex"?: number;
        "aria-colspan"?: number;
        "aria-controls"?: string;
        "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
        "aria-describedby"?: string;
        "aria-details"?: string;
        "aria-disabled"?: boolean | "false" | "true";
        "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
        "aria-errormessage"?: string;
        "aria-expanded"?: boolean | "false" | "true";
        "aria-flowto"?: string;
        "aria-grabbed"?: boolean | "false" | "true";
        "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
        "aria-hidden"?: boolean | "false" | "true";
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
        "aria-keyshortcuts"?: string;
        "aria-label"?: string;
        "aria-labelledby"?: string;
        "aria-level"?: number;
        "aria-live"?: "off" | "polite" | "assertive";
        "aria-modal"?: boolean | "false" | "true";
        "aria-multiline"?: boolean | "false" | "true";
        "aria-multiselectable"?: boolean | "false" | "true";
        "aria-orientation"?: "horizontal" | "vertical";
        "aria-owns"?: string;
        "aria-placeholder"?: string;
        "aria-posinset"?: number;
        "aria-pressed"?: boolean | "false" | "true" | "mixed";
        "aria-readonly"?: boolean | "false" | "true";
        "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
        "aria-required"?: boolean | "false" | "true";
        "aria-roledescription"?: string;
        "aria-rowcount"?: number;
        "aria-rowindex"?: number;
        "aria-rowspan"?: number;
        "aria-selected"?: boolean | "false" | "true";
        "aria-setsize"?: number;
        "aria-sort"?: "none" | "ascending" | "descending" | "other";
        "aria-valuemax"?: number;
        "aria-valuemin"?: number;
        "aria-valuenow"?: number;
        "aria-valuetext"?: string;
        closeIcon?: unknown;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    class: any;
    inlist: any;
} & {
    style?: string | import("vue").CSSProperties;
    icon?: unknown;
    title?: string;
    onCopy?: (payload: ClipboardEvent) => void;
    onCut?: (payload: ClipboardEvent) => void;
    onPaste?: (payload: ClipboardEvent) => void;
    onCompositionend?: (payload: CompositionEvent) => void;
    onCompositionstart?: (payload: CompositionEvent) => void;
    onCompositionupdate?: (payload: CompositionEvent) => void;
    onDrag?: (payload: DragEvent) => void;
    onDragend?: (payload: DragEvent) => void;
    onDragenter?: (payload: DragEvent) => void;
    onDragexit?: (payload: DragEvent) => void;
    onDragleave?: (payload: DragEvent) => void;
    onDragover?: (payload: DragEvent) => void;
    onDragstart?: (payload: DragEvent) => void;
    onDrop?: (payload: DragEvent) => void;
    onFocus?: (payload: FocusEvent) => void;
    onBlur?: (payload: FocusEvent) => void;
    onChange?: (payload: Event) => void;
    onBeforeinput?: (payload: Event) => void;
    onInput?: (payload: Event) => void;
    onReset?: (payload: Event) => void;
    onSubmit?: (payload: Event) => void;
    onInvalid?: (payload: Event) => void;
    onLoad?: (payload: Event) => void;
    onError?: (payload: Event) => void;
    onKeydown?: (payload: KeyboardEvent) => void;
    onKeypress?: (payload: KeyboardEvent) => void;
    onKeyup?: (payload: KeyboardEvent) => void;
    onAuxclick?: (payload: MouseEvent) => void;
    onClick?: (payload: MouseEvent) => void;
    onContextmenu?: (payload: MouseEvent) => void;
    onDblclick?: (payload: MouseEvent) => void;
    onMousedown?: (payload: MouseEvent) => void;
    onMouseenter?: (payload: MouseEvent) => void;
    onMouseleave?: (payload: MouseEvent) => void;
    onMousemove?: (payload: MouseEvent) => void;
    onMouseout?: (payload: MouseEvent) => void;
    onMouseover?: (payload: MouseEvent) => void;
    onMouseup?: (payload: MouseEvent) => void;
    onAbort?: (payload: Event) => void;
    onCanplay?: (payload: Event) => void;
    onCanplaythrough?: (payload: Event) => void;
    onDurationchange?: (payload: Event) => void;
    onEmptied?: (payload: Event) => void;
    onEncrypted?: (payload: Event) => void;
    onEnded?: (payload: Event) => void;
    onLoadeddata?: (payload: Event) => void;
    onLoadedmetadata?: (payload: Event) => void;
    onLoadstart?: (payload: Event) => void;
    onPause?: (payload: Event) => void;
    onPlay?: (payload: Event) => void;
    onPlaying?: (payload: Event) => void;
    onProgress?: (payload: Event) => void;
    onRatechange?: (payload: Event) => void;
    onSeeked?: (payload: Event) => void;
    onSeeking?: (payload: Event) => void;
    onStalled?: (payload: Event) => void;
    onSuspend?: (payload: Event) => void;
    onTimeupdate?: (payload: Event) => void;
    onVolumechange?: (payload: Event) => void;
    onWaiting?: (payload: Event) => void;
    onSelect?: (payload: Event) => void;
    onScroll?: (payload: UIEvent) => void;
    onTouchcancel?: (payload: TouchEvent) => void;
    onTouchend?: (payload: TouchEvent) => void;
    onTouchmove?: (payload: TouchEvent) => void;
    onTouchstart?: (payload: TouchEvent) => void;
    onPointerdown?: (payload: PointerEvent) => void;
    onPointermove?: (payload: PointerEvent) => void;
    onPointerup?: (payload: PointerEvent) => void;
    onPointercancel?: (payload: PointerEvent) => void;
    onPointerenter?: (payload: PointerEvent) => void;
    onPointerleave?: (payload: PointerEvent) => void;
    onPointerover?: (payload: PointerEvent) => void;
    onPointerout?: (payload: PointerEvent) => void;
    onWheel?: (payload: WheelEvent) => void;
    onAnimationstart?: (payload: AnimationEvent) => void;
    onAnimationend?: (payload: AnimationEvent) => void;
    onAnimationiteration?: (payload: AnimationEvent) => void;
    onTransitionend?: (payload: TransitionEvent) => void;
    onTransitionstart?: (payload: TransitionEvent) => void;
    prefixCls?: string;
    role?: string;
    hidden?: boolean;
    visible?: boolean;
    color?: LiteralUnion<"default" | "blue" | "cyan" | "gold" | "green" | "lime" | "magenta" | "orange" | "pink" | "purple" | "red" | "yellow" | "error" | "success" | "warning" | "processing" | "geekblue" | "volcano", string>;
    contextmenu?: string;
    id?: string;
    tabindex?: number;
    placeholder?: string;
    closable?: boolean;
    onClose?: (e: MouseEvent) => void;
    prefix?: string;
    dir?: string;
    innerHTML?: string;
    accesskey?: string;
    contenteditable?: boolean | "inherit" | "false" | "true";
    draggable?: boolean | "false" | "true";
    lang?: string;
    spellcheck?: boolean | "false" | "true";
    translate?: "yes" | "no";
    radiogroup?: string;
    about?: string;
    datatype?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autocapitalize?: string;
    autocorrect?: string;
    autocave?: string;
    itemprop?: string;
    itemscope?: boolean;
    itemtype?: string;
    itemid?: string;
    itemref?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputmode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "inline" | "both" | "list";
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "false" | "true" | "mixed";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "time" | "false" | "true" | "page" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "dialog" | "menu" | "false" | "true" | "grid" | "listbox" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "polite" | "assertive";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "false" | "true" | "mixed";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    closeIcon?: unknown;
}>, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:visible")[], "close" | "update:visible", {
    class: any;
    inlist: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly CheckableTag: typeof CheckableTag;
});
export default _default;
