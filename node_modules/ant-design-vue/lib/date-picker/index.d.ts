import { App, DefineComponent } from 'vue';
import { RangePickerPropsTypes, MonthPickerPropsTypes, WeekPickerPropsTypes } from './interface';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            locale: any;
        }> & Pick<Readonly<{
            locale: any;
        } & {
            onFocus?: EventHandlerNonNull;
            onBlur?: EventHandlerNonNull;
            onChange?: (date: import("moment").Moment, dateString: string) => void;
            prefixCls?: string;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            mode?: "time" | "date" | "month" | "year" | "decade";
            value?: import("./props").PickerValue;
            autofocus?: boolean;
            name?: string;
            placeholder?: string;
            transitionName?: string;
            dropdownClassName?: string;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: import("./props").PickerValue;
            allowClear?: boolean;
            suffixIcon?: unknown;
            inputPrefixCls?: string;
            onOpenChange?: (status: boolean) => void;
            showToday?: boolean;
            defaultPickerValue?: import("./props").PickerValue;
            showTime?: unknown;
            disabledTime?: unknown;
            renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
            onOk?: (selectedTime: import("moment").Moment) => void;
            onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
            format?: string | Function | string[];
            localeCode?: string;
            getCalendarContainer?: (triggerNode: Element) => HTMLElement;
            disabledDate?: (current: import("moment").Moment) => boolean;
            dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
            pickerClass?: string;
            pickerInputClass?: string;
            valueFormat?: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "onFocus" | "onBlur" | "onChange" | "prefixCls" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "open" | "disabled" | "mode" | "value" | "autofocus" | "name" | "placeholder" | "transitionName" | "dropdownClassName" | "popupStyle" | "defaultValue" | "allowClear" | "suffixIcon" | "inputPrefixCls" | "onOpenChange" | "showToday" | "defaultPickerValue" | "showTime" | "disabledTime" | "renderExtraFooter" | "onOk" | "onPanelChange" | "format" | "localeCode" | "getCalendarContainer" | "disabledDate" | "dateRender" | "pickerClass" | "pickerInputClass" | "valueFormat">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: any;
        } & {
            onFocus?: EventHandlerNonNull;
            onBlur?: EventHandlerNonNull;
            onChange?: (date: import("moment").Moment, dateString: string) => void;
            prefixCls?: string;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            mode?: "time" | "date" | "month" | "year" | "decade";
            value?: import("./props").PickerValue;
            autofocus?: boolean;
            name?: string;
            placeholder?: string;
            transitionName?: string;
            dropdownClassName?: string;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: import("./props").PickerValue;
            allowClear?: boolean;
            suffixIcon?: unknown;
            inputPrefixCls?: string;
            onOpenChange?: (status: boolean) => void;
            showToday?: boolean;
            defaultPickerValue?: import("./props").PickerValue;
            showTime?: unknown;
            disabledTime?: unknown;
            renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
            onOk?: (selectedTime: import("moment").Moment) => void;
            onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
            format?: string | Function | string[];
            localeCode?: string;
            getCalendarContainer?: (triggerNode: Element) => HTMLElement;
            disabledDate?: (current: import("moment").Moment) => boolean;
            dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
            pickerClass?: string;
            pickerInputClass?: string;
            valueFormat?: string;
        }>, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            locale: any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        mode?: "time" | "date" | "month" | "year" | "decade";
        value?: import("./props").PickerValue;
        autofocus?: boolean;
        name?: string;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./props").PickerValue;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        showToday?: boolean;
        defaultPickerValue?: import("./props").PickerValue;
        showTime?: unknown;
        disabledTime?: unknown;
        renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
        onOk?: (selectedTime: import("moment").Moment) => void;
        onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
    }> & import("vue").ShallowUnwrapRef<{}> & {
        [x: string]: never;
    } & import("vue").MethodOptions & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: any;
} & {
    onFocus?: EventHandlerNonNull;
    onBlur?: EventHandlerNonNull;
    onChange?: (date: import("moment").Moment, dateString: string) => void;
    prefixCls?: string;
    size?: "default" | "small" | "large";
    open?: boolean;
    disabled?: boolean;
    mode?: "time" | "date" | "month" | "year" | "decade";
    value?: import("./props").PickerValue;
    autofocus?: boolean;
    name?: string;
    placeholder?: string;
    transitionName?: string;
    dropdownClassName?: string;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: import("./props").PickerValue;
    allowClear?: boolean;
    suffixIcon?: unknown;
    inputPrefixCls?: string;
    onOpenChange?: (status: boolean) => void;
    showToday?: boolean;
    defaultPickerValue?: import("./props").PickerValue;
    showTime?: unknown;
    disabledTime?: unknown;
    renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
    onOk?: (selectedTime: import("moment").Moment) => void;
    onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
    format?: string | Function | string[];
    localeCode?: string;
    getCalendarContainer?: (triggerNode: Element) => HTMLElement;
    disabledDate?: (current: import("moment").Moment) => boolean;
    dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
    pickerClass?: string;
    pickerInputClass?: string;
    valueFormat?: string;
}>, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    locale: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    readonly RangePicker: DefineComponent<RangePickerPropsTypes, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (dates: import("./props").RangePickerValue, dateStrings: [string, string]) => void;
        onMouseenter?: (e: MouseEvent) => void;
        onMouseleave?: (e: MouseEvent) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        separator?: unknown;
        disabled?: boolean;
        mode?: string | string[];
        value?: unknown;
        autofocus?: boolean;
        name?: string;
        placeholder?: [string, string];
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: unknown;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        showToday?: boolean;
        tagPrefixCls?: string;
        defaultPickerValue?: unknown;
        timePicker?: unknown;
        showTime?: unknown;
        ranges?: import("./props").RangePickerValue;
        disabledTime?: (current: import("./props").RangePickerValue, type: string) => {
            disabledHours?: () => number[];
            disabledMinutes?: () => number[];
            disabledSeconds?: () => number[];
        };
        renderExtraFooter?: unknown;
        onCalendarChange?: (dates: import("./props").RangePickerValue, dateStrings: [string, string]) => void;
        onOk?: (selectedTime: import("./interface").RangePickerPresetRange) => void;
        onPanelChange?: void;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
    }>, {
        locale: any;
    }>;
    readonly MonthPicker: DefineComponent<MonthPickerPropsTypes, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        value?: import("./props").PickerValue;
        autofocus?: boolean;
        name?: string;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./props").PickerValue;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        defaultPickerValue?: import("./props").PickerValue;
        renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
        monthCellContentRender?: (date: import("moment").Moment, locale: any) => any;
    }>, {
        locale: any;
    }>;
    readonly WeekPicker: DefineComponent<WeekPickerPropsTypes, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        value?: import("./props").PickerValue;
        autofocus?: boolean;
        name?: string;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./props").PickerValue;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        defaultPickerValue?: import("./props").PickerValue;
        renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
    }>, {
        locale: any;
    }>;
} & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            locale: any;
        }> & Pick<Readonly<{
            locale: any;
        } & {
            onFocus?: EventHandlerNonNull;
            onBlur?: EventHandlerNonNull;
            onChange?: (date: import("moment").Moment, dateString: string) => void;
            prefixCls?: string;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            mode?: "time" | "date" | "month" | "year" | "decade";
            value?: import("./props").PickerValue;
            autofocus?: boolean;
            name?: string;
            placeholder?: string;
            transitionName?: string;
            dropdownClassName?: string;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: import("./props").PickerValue;
            allowClear?: boolean;
            suffixIcon?: unknown;
            inputPrefixCls?: string;
            onOpenChange?: (status: boolean) => void;
            showToday?: boolean;
            defaultPickerValue?: import("./props").PickerValue;
            showTime?: unknown;
            disabledTime?: unknown;
            renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
            onOk?: (selectedTime: import("moment").Moment) => void;
            onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
            format?: string | Function | string[];
            localeCode?: string;
            getCalendarContainer?: (triggerNode: Element) => HTMLElement;
            disabledDate?: (current: import("moment").Moment) => boolean;
            dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
            pickerClass?: string;
            pickerInputClass?: string;
            valueFormat?: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "onFocus" | "onBlur" | "onChange" | "prefixCls" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "open" | "disabled" | "mode" | "value" | "autofocus" | "name" | "placeholder" | "transitionName" | "dropdownClassName" | "popupStyle" | "defaultValue" | "allowClear" | "suffixIcon" | "inputPrefixCls" | "onOpenChange" | "showToday" | "defaultPickerValue" | "showTime" | "disabledTime" | "renderExtraFooter" | "onOk" | "onPanelChange" | "format" | "localeCode" | "getCalendarContainer" | "disabledDate" | "dateRender" | "pickerClass" | "pickerInputClass" | "valueFormat">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: any;
        } & {
            onFocus?: EventHandlerNonNull;
            onBlur?: EventHandlerNonNull;
            onChange?: (date: import("moment").Moment, dateString: string) => void;
            prefixCls?: string;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            mode?: "time" | "date" | "month" | "year" | "decade";
            value?: import("./props").PickerValue;
            autofocus?: boolean;
            name?: string;
            placeholder?: string;
            transitionName?: string;
            dropdownClassName?: string;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: import("./props").PickerValue;
            allowClear?: boolean;
            suffixIcon?: unknown;
            inputPrefixCls?: string;
            onOpenChange?: (status: boolean) => void;
            showToday?: boolean;
            defaultPickerValue?: import("./props").PickerValue;
            showTime?: unknown;
            disabledTime?: unknown;
            renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
            onOk?: (selectedTime: import("moment").Moment) => void;
            onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
            format?: string | Function | string[];
            localeCode?: string;
            getCalendarContainer?: (triggerNode: Element) => HTMLElement;
            disabledDate?: (current: import("moment").Moment) => boolean;
            dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
            pickerClass?: string;
            pickerInputClass?: string;
            valueFormat?: string;
        }>, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            locale: any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        mode?: "time" | "date" | "month" | "year" | "decade";
        value?: import("./props").PickerValue;
        autofocus?: boolean;
        name?: string;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./props").PickerValue;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        showToday?: boolean;
        defaultPickerValue?: import("./props").PickerValue;
        showTime?: unknown;
        disabledTime?: unknown;
        renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
        onOk?: (selectedTime: import("moment").Moment) => void;
        onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
    }> & import("vue").ShallowUnwrapRef<{}> & {
        [x: string]: never;
    } & import("vue").MethodOptions & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: any;
} & {
    onFocus?: EventHandlerNonNull;
    onBlur?: EventHandlerNonNull;
    onChange?: (date: import("moment").Moment, dateString: string) => void;
    prefixCls?: string;
    size?: "default" | "small" | "large";
    open?: boolean;
    disabled?: boolean;
    mode?: "time" | "date" | "month" | "year" | "decade";
    value?: import("./props").PickerValue;
    autofocus?: boolean;
    name?: string;
    placeholder?: string;
    transitionName?: string;
    dropdownClassName?: string;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: import("./props").PickerValue;
    allowClear?: boolean;
    suffixIcon?: unknown;
    inputPrefixCls?: string;
    onOpenChange?: (status: boolean) => void;
    showToday?: boolean;
    defaultPickerValue?: import("./props").PickerValue;
    showTime?: unknown;
    disabledTime?: unknown;
    renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
    onOk?: (selectedTime: import("moment").Moment) => void;
    onPanelChange?: (value: import("moment").Moment, mode: "time" | "date" | "month" | "year" | "decade") => void;
    format?: string | Function | string[];
    localeCode?: string;
    getCalendarContainer?: (triggerNode: Element) => HTMLElement;
    disabledDate?: (current: import("moment").Moment) => boolean;
    dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
    pickerClass?: string;
    pickerInputClass?: string;
    valueFormat?: string;
}>, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    locale: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    readonly RangePicker: DefineComponent<RangePickerPropsTypes, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (dates: import("./props").RangePickerValue, dateStrings: [string, string]) => void;
        onMouseenter?: (e: MouseEvent) => void;
        onMouseleave?: (e: MouseEvent) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        separator?: unknown;
        disabled?: boolean;
        mode?: string | string[];
        value?: unknown;
        autofocus?: boolean;
        name?: string;
        placeholder?: [string, string];
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: unknown;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        showToday?: boolean;
        tagPrefixCls?: string;
        defaultPickerValue?: unknown;
        timePicker?: unknown;
        showTime?: unknown;
        ranges?: import("./props").RangePickerValue;
        disabledTime?: (current: import("./props").RangePickerValue, type: string) => {
            disabledHours?: () => number[];
            disabledMinutes?: () => number[];
            disabledSeconds?: () => number[];
        };
        renderExtraFooter?: unknown;
        onCalendarChange?: (dates: import("./props").RangePickerValue, dateStrings: [string, string]) => void;
        onOk?: (selectedTime: import("./interface").RangePickerPresetRange) => void;
        onPanelChange?: void;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
    }>, {
        locale: any;
    }>;
    readonly MonthPicker: DefineComponent<MonthPickerPropsTypes, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        value?: import("./props").PickerValue;
        autofocus?: boolean;
        name?: string;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./props").PickerValue;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        defaultPickerValue?: import("./props").PickerValue;
        renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
        monthCellContentRender?: (date: import("moment").Moment, locale: any) => any;
    }>, {
        locale: any;
    }>;
    readonly WeekPicker: DefineComponent<WeekPickerPropsTypes, {}, {}, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        locale: any;
    } & {
        onFocus?: EventHandlerNonNull;
        onBlur?: EventHandlerNonNull;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        prefixCls?: string;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        value?: import("./props").PickerValue;
        autofocus?: boolean;
        name?: string;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./props").PickerValue;
        allowClear?: boolean;
        suffixIcon?: unknown;
        inputPrefixCls?: string;
        onOpenChange?: (status: boolean) => void;
        defaultPickerValue?: import("./props").PickerValue;
        renderExtraFooter?: (mode: "time" | "date" | "month" | "year" | "decade") => any;
        format?: string | Function | string[];
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        disabledDate?: (current: import("moment").Moment) => boolean;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        valueFormat?: string;
    }>, {
        locale: any;
    }>;
} & {
    install: (app: App<any>, ...options: any[]) => any;
});
export default _default;
