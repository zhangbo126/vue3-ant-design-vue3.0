import { App } from 'vue';
import CheckboxGroup from './Group';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        }> & Pick<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        } & {
            disabled?: boolean;
            value?: any;
            autofocus?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            isGroup?: boolean;
            indeterminate?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "disabled" | "value" | "autofocus" | "defaultChecked" | "checked" | "isGroup" | "indeterminate">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:checked", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        } & {
            disabled?: boolean;
            value?: any;
            autofocus?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            isGroup?: boolean;
            indeterminate?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            checkboxGroupContext: any;
        }, unknown, {}, {
            handleChange(event: import("../radio").RadioChangeEvent): void;
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:checked")[], string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        id: string;
        type: string;
        name: string;
        "onUpdate:checked": (...args: any[]) => any;
    } & {
        disabled?: boolean;
        value?: any;
        autofocus?: boolean;
        defaultChecked?: boolean;
        checked?: boolean;
        isGroup?: boolean;
        indeterminate?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        checkboxGroupContext: any;
    }> & {} & {
        handleChange(event: import("../radio").RadioChangeEvent): void;
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    id: string;
    type: string;
    name: string;
    "onUpdate:checked": (...args: any[]) => any;
} & {
    disabled?: boolean;
    value?: any;
    autofocus?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
    isGroup?: boolean;
    indeterminate?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    checkboxGroupContext: any;
}, unknown, {}, {
    handleChange(event: import("../radio").RadioChangeEvent): void;
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:checked")[], "change" | "update:checked", {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    id: string;
    type: string;
    name: string;
    "onUpdate:checked": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Group: typeof CheckboxGroup;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        }> & Pick<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        } & {
            disabled?: boolean;
            value?: any;
            autofocus?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            isGroup?: boolean;
            indeterminate?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "disabled" | "value" | "autofocus" | "defaultChecked" | "checked" | "isGroup" | "indeterminate">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:checked", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        } & {
            disabled?: boolean;
            value?: any;
            autofocus?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            isGroup?: boolean;
            indeterminate?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            checkboxGroupContext: any;
        }, unknown, {}, {
            handleChange(event: import("../radio").RadioChangeEvent): void;
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:checked")[], string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            id: string;
            type: string;
            name: string;
            "onUpdate:checked": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        id: string;
        type: string;
        name: string;
        "onUpdate:checked": (...args: any[]) => any;
    } & {
        disabled?: boolean;
        value?: any;
        autofocus?: boolean;
        defaultChecked?: boolean;
        checked?: boolean;
        isGroup?: boolean;
        indeterminate?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        checkboxGroupContext: any;
    }> & {} & {
        handleChange(event: import("../radio").RadioChangeEvent): void;
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    id: string;
    type: string;
    name: string;
    "onUpdate:checked": (...args: any[]) => any;
} & {
    disabled?: boolean;
    value?: any;
    autofocus?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
    isGroup?: boolean;
    indeterminate?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    checkboxGroupContext: any;
}, unknown, {}, {
    handleChange(event: import("../radio").RadioChangeEvent): void;
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:checked")[], "change" | "update:checked", {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    id: string;
    type: string;
    name: string;
    "onUpdate:checked": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Group: typeof CheckboxGroup;
});
export default _default;
