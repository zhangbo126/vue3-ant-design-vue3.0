import { App } from 'vue';
import TabPane from '../vc-tabs/src/TabPane';
import TabContent from '../vc-tabs/src/TabContent';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        }> & Pick<Readonly<{
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        } & {
            onChange?: (activeKey: string) => void;
            size?: string;
            type?: "line" | "card" | "editable-card";
            activeKey?: import("../_util/type").Key;
            animated?: boolean | {
                [key: string]: any;
            };
            tabBarExtraContent?: any;
            defaultActiveKey?: import("../_util/type").Key;
            onPrevClick?: (e: MouseEvent) => void;
            onNextClick?: (e: MouseEvent) => void;
            onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "onChange" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "type" | "activeKey" | "animated" | "tabBarExtraContent" | "defaultActiveKey" | "onPrevClick" | "onNextClick" | "onEdit">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:activeKey" | "edit", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        } & {
            onChange?: (activeKey: string) => void;
            size?: string;
            type?: "line" | "card" | "editable-card";
            activeKey?: import("../_util/type").Key;
            animated?: boolean | {
                [key: string]: any;
            };
            tabBarExtraContent?: any;
            defaultActiveKey?: import("../_util/type").Key;
            onPrevClick?: (e: MouseEvent) => void;
            onNextClick?: (e: MouseEvent) => void;
            onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            removeTab(targetKey: string, e: MouseEvent): void;
            handleChange(activeKey: string): void;
            createNewTab(targetKey: MouseEvent): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "edit")[], string, {
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        centered: boolean;
        tabBarStyle: {
            [key: string]: any;
        };
        tabPosition: string;
        renderTabBar: (...args: any[]) => any;
        tabBarGutter: number;
        destroyInactiveTabPane: boolean;
        hideAdd: boolean;
        onTabClick: (...args: any[]) => any;
    } & {
        onChange?: (activeKey: string) => void;
        size?: string;
        type?: "line" | "card" | "editable-card";
        activeKey?: import("../_util/type").Key;
        animated?: boolean | {
            [key: string]: any;
        };
        tabBarExtraContent?: any;
        defaultActiveKey?: import("../_util/type").Key;
        onPrevClick?: (e: MouseEvent) => void;
        onNextClick?: (e: MouseEvent) => void;
        onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        removeTab(targetKey: string, e: MouseEvent): void;
        handleChange(activeKey: string): void;
        createNewTab(targetKey: MouseEvent): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    centered: boolean;
    tabBarStyle: {
        [key: string]: any;
    };
    tabPosition: string;
    renderTabBar: (...args: any[]) => any;
    tabBarGutter: number;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    onTabClick: (...args: any[]) => any;
} & {
    onChange?: (activeKey: string) => void;
    size?: string;
    type?: "line" | "card" | "editable-card";
    activeKey?: import("../_util/type").Key;
    animated?: boolean | {
        [key: string]: any;
    };
    tabBarExtraContent?: any;
    defaultActiveKey?: import("../_util/type").Key;
    onPrevClick?: (e: MouseEvent) => void;
    onNextClick?: (e: MouseEvent) => void;
    onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    removeTab(targetKey: string, e: MouseEvent): void;
    handleChange(activeKey: string): void;
    createNewTab(targetKey: MouseEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "edit")[], "change" | "update:activeKey" | "edit", {
    prefixCls: string;
    centered: boolean;
    tabBarStyle: {
        [key: string]: any;
    };
    tabPosition: string;
    renderTabBar: (...args: any[]) => any;
    tabBarGutter: number;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    onTabClick: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly TabPane: typeof TabPane;
    readonly TabContent: typeof TabContent;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        }> & Pick<Readonly<{
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        } & {
            onChange?: (activeKey: string) => void;
            size?: string;
            type?: "line" | "card" | "editable-card";
            activeKey?: import("../_util/type").Key;
            animated?: boolean | {
                [key: string]: any;
            };
            tabBarExtraContent?: any;
            defaultActiveKey?: import("../_util/type").Key;
            onPrevClick?: (e: MouseEvent) => void;
            onNextClick?: (e: MouseEvent) => void;
            onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "onChange" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "type" | "activeKey" | "animated" | "tabBarExtraContent" | "defaultActiveKey" | "onPrevClick" | "onNextClick" | "onEdit">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:activeKey" | "edit", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        } & {
            onChange?: (activeKey: string) => void;
            size?: string;
            type?: "line" | "card" | "editable-card";
            activeKey?: import("../_util/type").Key;
            animated?: boolean | {
                [key: string]: any;
            };
            tabBarExtraContent?: any;
            defaultActiveKey?: import("../_util/type").Key;
            onPrevClick?: (e: MouseEvent) => void;
            onNextClick?: (e: MouseEvent) => void;
            onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            removeTab(targetKey: string, e: MouseEvent): void;
            handleChange(activeKey: string): void;
            createNewTab(targetKey: MouseEvent): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "edit")[], string, {
            prefixCls: string;
            centered: boolean;
            tabBarStyle: {
                [key: string]: any;
            };
            tabPosition: string;
            renderTabBar: (...args: any[]) => any;
            tabBarGutter: number;
            destroyInactiveTabPane: boolean;
            hideAdd: boolean;
            onTabClick: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        centered: boolean;
        tabBarStyle: {
            [key: string]: any;
        };
        tabPosition: string;
        renderTabBar: (...args: any[]) => any;
        tabBarGutter: number;
        destroyInactiveTabPane: boolean;
        hideAdd: boolean;
        onTabClick: (...args: any[]) => any;
    } & {
        onChange?: (activeKey: string) => void;
        size?: string;
        type?: "line" | "card" | "editable-card";
        activeKey?: import("../_util/type").Key;
        animated?: boolean | {
            [key: string]: any;
        };
        tabBarExtraContent?: any;
        defaultActiveKey?: import("../_util/type").Key;
        onPrevClick?: (e: MouseEvent) => void;
        onNextClick?: (e: MouseEvent) => void;
        onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        removeTab(targetKey: string, e: MouseEvent): void;
        handleChange(activeKey: string): void;
        createNewTab(targetKey: MouseEvent): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    centered: boolean;
    tabBarStyle: {
        [key: string]: any;
    };
    tabPosition: string;
    renderTabBar: (...args: any[]) => any;
    tabBarGutter: number;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    onTabClick: (...args: any[]) => any;
} & {
    onChange?: (activeKey: string) => void;
    size?: string;
    type?: "line" | "card" | "editable-card";
    activeKey?: import("../_util/type").Key;
    animated?: boolean | {
        [key: string]: any;
    };
    tabBarExtraContent?: any;
    defaultActiveKey?: import("../_util/type").Key;
    onPrevClick?: (e: MouseEvent) => void;
    onNextClick?: (e: MouseEvent) => void;
    onEdit?: (targetKey: string | MouseEvent, action: "add" | "remove") => void;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    removeTab(targetKey: string, e: MouseEvent): void;
    handleChange(activeKey: string): void;
    createNewTab(targetKey: MouseEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "edit")[], "change" | "update:activeKey" | "edit", {
    prefixCls: string;
    centered: boolean;
    tabBarStyle: {
        [key: string]: any;
    };
    tabPosition: string;
    renderTabBar: (...args: any[]) => any;
    tabBarGutter: number;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    onTabClick: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly TabPane: typeof TabPane;
    readonly TabContent: typeof TabContent;
});
export default _default;
export { TabPane, TabContent };
