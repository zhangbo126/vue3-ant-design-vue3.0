import { nextTick } from 'vue';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        }> & Pick<Readonly<{
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        } & {
            onChange?: (num: number) => void;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            value?: import("../_util/type").Key;
            autofocus?: boolean;
            defaultValue?: import("../_util/type").Key;
            onPressEnter?: EventHandlerNonNull;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "onChange" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "disabled" | "value" | "autofocus" | "defaultValue" | "onPressEnter">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        } & {
            onChange?: (num: number) => void;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            value?: import("../_util/type").Key;
            autofocus?: boolean;
            defaultValue?: import("../_util/type").Key;
            onPressEnter?: EventHandlerNonNull;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            inputNumberRef: any;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        id: string;
        tabindex: number;
        name: string;
        placeholder: string;
        step: import("../_util/type").Key;
        max: number;
        min: number;
        formatter: (...args: any[]) => any;
        parser: (...args: any[]) => any;
        decimalSeparator: string;
        precision: number;
    } & {
        onChange?: (num: number) => void;
        size?: "default" | "small" | "large";
        disabled?: boolean;
        value?: import("../_util/type").Key;
        autofocus?: boolean;
        defaultValue?: import("../_util/type").Key;
        onPressEnter?: EventHandlerNonNull;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        inputNumberRef: any;
        focus: () => void;
        blur: () => void;
    }> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    id: string;
    tabindex: number;
    name: string;
    placeholder: string;
    step: import("../_util/type").Key;
    max: number;
    min: number;
    formatter: (...args: any[]) => any;
    parser: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
} & {
    onChange?: (num: number) => void;
    size?: "default" | "small" | "large";
    disabled?: boolean;
    value?: import("../_util/type").Key;
    autofocus?: boolean;
    defaultValue?: import("../_util/type").Key;
    onPressEnter?: EventHandlerNonNull;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    inputNumberRef: any;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    id: string;
    tabindex: number;
    name: string;
    placeholder: string;
    step: import("../_util/type").Key;
    max: number;
    min: number;
    formatter: (...args: any[]) => any;
    parser: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        }> & Pick<Readonly<{
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        } & {
            onChange?: (num: number) => void;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            value?: import("../_util/type").Key;
            autofocus?: boolean;
            defaultValue?: import("../_util/type").Key;
            onPressEnter?: EventHandlerNonNull;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "onChange" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "size" | "disabled" | "value" | "autofocus" | "defaultValue" | "onPressEnter">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        } & {
            onChange?: (num: number) => void;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            value?: import("../_util/type").Key;
            autofocus?: boolean;
            defaultValue?: import("../_util/type").Key;
            onPressEnter?: EventHandlerNonNull;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            inputNumberRef: any;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            id: string;
            tabindex: number;
            name: string;
            placeholder: string;
            step: import("../_util/type").Key;
            max: number;
            min: number;
            formatter: (...args: any[]) => any;
            parser: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        id: string;
        tabindex: number;
        name: string;
        placeholder: string;
        step: import("../_util/type").Key;
        max: number;
        min: number;
        formatter: (...args: any[]) => any;
        parser: (...args: any[]) => any;
        decimalSeparator: string;
        precision: number;
    } & {
        onChange?: (num: number) => void;
        size?: "default" | "small" | "large";
        disabled?: boolean;
        value?: import("../_util/type").Key;
        autofocus?: boolean;
        defaultValue?: import("../_util/type").Key;
        onPressEnter?: EventHandlerNonNull;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        inputNumberRef: any;
        focus: () => void;
        blur: () => void;
    }> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    id: string;
    tabindex: number;
    name: string;
    placeholder: string;
    step: import("../_util/type").Key;
    max: number;
    min: number;
    formatter: (...args: any[]) => any;
    parser: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
} & {
    onChange?: (num: number) => void;
    size?: "default" | "small" | "large";
    disabled?: boolean;
    value?: import("../_util/type").Key;
    autofocus?: boolean;
    defaultValue?: import("../_util/type").Key;
    onPressEnter?: EventHandlerNonNull;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    inputNumberRef: any;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    id: string;
    tabindex: number;
    name: string;
    placeholder: string;
    step: import("../_util/type").Key;
    max: number;
    min: number;
    formatter: (...args: any[]) => any;
    parser: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
