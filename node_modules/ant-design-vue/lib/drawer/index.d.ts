import { nextTick } from 'vue';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sPush: boolean;
        };
        $props: Partial<{
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        }> & Pick<Readonly<{
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        } & {
            title?: import("../_util/type").VueNode;
            visible?: boolean;
            getContainer?: any;
            destroyOnClose?: boolean;
            handle?: import("../_util/type").VueNode;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "title" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "visible" | "getContainer" | "destroyOnClose" | "handle">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        } & {
            title?: import("../_util/type").VueNode;
            visible?: boolean;
            getContainer?: any;
            destroyOnClose?: boolean;
            handle?: import("../_util/type").VueNode;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            destroyClose: boolean;
            preVisible: boolean;
            parentDrawer: any;
        }, {
            sPush: boolean;
        }, {}, {
            domFocus(): void;
            close(e: Event): void;
            push(): void;
            pull(): void;
            onDestroyTransitionEnd(): void;
            getDestroyOnClose(): boolean;
            getPushTransform(placement?: "bottom" | "left" | "right" | "top"): string;
            getRcDrawerStyle(): {
                zIndex: number;
                transform: string;
            };
            renderHeader(prefixCls: string): JSX.Element;
            renderCloseIcon(prefixCls: string): JSX.Element;
            renderBody(prefixCls: string): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        mask: boolean;
        prefixCls: string;
        keyboard: boolean;
        height: import("../_util/type").Key;
        zIndex: number;
        maskClosable: boolean;
        width: import("../_util/type").Key;
        bodyStyle: {
            [key: string]: any;
        };
        closable: boolean;
        onClose: (...args: any[]) => any;
        placement: "bottom" | "left" | "right" | "top";
        "onUpdate:visible": (...args: any[]) => any;
        level: any;
        afterVisibleChange: (...args: any[]) => any;
        maskStyle: {
            [key: string]: any;
        };
        wrapStyle: {
            [key: string]: any;
        };
        headerStyle: {
            [key: string]: any;
        };
        drawerStyle: {
            [key: string]: any;
        };
        wrapClassName: string;
    } & {
        title?: import("../_util/type").VueNode;
        visible?: boolean;
        getContainer?: any;
        destroyOnClose?: boolean;
        handle?: import("../_util/type").VueNode;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        destroyClose: boolean;
        preVisible: boolean;
        parentDrawer: any;
    }> & {
        sPush: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        domFocus(): void;
        close(e: Event): void;
        push(): void;
        pull(): void;
        onDestroyTransitionEnd(): void;
        getDestroyOnClose(): boolean;
        getPushTransform(placement?: "bottom" | "left" | "right" | "top"): string;
        getRcDrawerStyle(): {
            zIndex: number;
            transform: string;
        };
        renderHeader(prefixCls: string): JSX.Element;
        renderCloseIcon(prefixCls: string): JSX.Element;
        renderBody(prefixCls: string): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    mask: boolean;
    prefixCls: string;
    keyboard: boolean;
    height: import("../_util/type").Key;
    zIndex: number;
    maskClosable: boolean;
    width: import("../_util/type").Key;
    bodyStyle: {
        [key: string]: any;
    };
    closable: boolean;
    onClose: (...args: any[]) => any;
    placement: "bottom" | "left" | "right" | "top";
    "onUpdate:visible": (...args: any[]) => any;
    level: any;
    afterVisibleChange: (...args: any[]) => any;
    maskStyle: {
        [key: string]: any;
    };
    wrapStyle: {
        [key: string]: any;
    };
    headerStyle: {
        [key: string]: any;
    };
    drawerStyle: {
        [key: string]: any;
    };
    wrapClassName: string;
} & {
    title?: import("../_util/type").VueNode;
    visible?: boolean;
    getContainer?: any;
    destroyOnClose?: boolean;
    handle?: import("../_util/type").VueNode;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    destroyClose: boolean;
    preVisible: boolean;
    parentDrawer: any;
}, {
    sPush: boolean;
}, {}, {
    domFocus(): void;
    close(e: Event): void;
    push(): void;
    pull(): void;
    onDestroyTransitionEnd(): void;
    getDestroyOnClose(): boolean;
    getPushTransform(placement?: "bottom" | "left" | "right" | "top"): string;
    getRcDrawerStyle(): {
        zIndex: number;
        transform: string;
    };
    renderHeader(prefixCls: string): JSX.Element;
    renderCloseIcon(prefixCls: string): JSX.Element;
    renderBody(prefixCls: string): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    mask: boolean;
    prefixCls: string;
    keyboard: boolean;
    height: import("../_util/type").Key;
    zIndex: number;
    maskClosable: boolean;
    width: import("../_util/type").Key;
    bodyStyle: {
        [key: string]: any;
    };
    closable: boolean;
    onClose: (...args: any[]) => any;
    placement: "bottom" | "left" | "right" | "top";
    "onUpdate:visible": (...args: any[]) => any;
    level: any;
    afterVisibleChange: (...args: any[]) => any;
    maskStyle: {
        [key: string]: any;
    };
    wrapStyle: {
        [key: string]: any;
    };
    headerStyle: {
        [key: string]: any;
    };
    drawerStyle: {
        [key: string]: any;
    };
    wrapClassName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sPush: boolean;
        };
        $props: Partial<{
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        }> & Pick<Readonly<{
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        } & {
            title?: import("../_util/type").VueNode;
            visible?: boolean;
            getContainer?: any;
            destroyOnClose?: boolean;
            handle?: import("../_util/type").VueNode;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "title" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "visible" | "getContainer" | "destroyOnClose" | "handle">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        } & {
            title?: import("../_util/type").VueNode;
            visible?: boolean;
            getContainer?: any;
            destroyOnClose?: boolean;
            handle?: import("../_util/type").VueNode;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            destroyClose: boolean;
            preVisible: boolean;
            parentDrawer: any;
        }, {
            sPush: boolean;
        }, {}, {
            domFocus(): void;
            close(e: Event): void;
            push(): void;
            pull(): void;
            onDestroyTransitionEnd(): void;
            getDestroyOnClose(): boolean;
            getPushTransform(placement?: "bottom" | "left" | "right" | "top"): string;
            getRcDrawerStyle(): {
                zIndex: number;
                transform: string;
            };
            renderHeader(prefixCls: string): JSX.Element;
            renderCloseIcon(prefixCls: string): JSX.Element;
            renderBody(prefixCls: string): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            mask: boolean;
            prefixCls: string;
            keyboard: boolean;
            height: import("../_util/type").Key;
            zIndex: number;
            maskClosable: boolean;
            width: import("../_util/type").Key;
            bodyStyle: {
                [key: string]: any;
            };
            closable: boolean;
            onClose: (...args: any[]) => any;
            placement: "bottom" | "left" | "right" | "top";
            "onUpdate:visible": (...args: any[]) => any;
            level: any;
            afterVisibleChange: (...args: any[]) => any;
            maskStyle: {
                [key: string]: any;
            };
            wrapStyle: {
                [key: string]: any;
            };
            headerStyle: {
                [key: string]: any;
            };
            drawerStyle: {
                [key: string]: any;
            };
            wrapClassName: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        mask: boolean;
        prefixCls: string;
        keyboard: boolean;
        height: import("../_util/type").Key;
        zIndex: number;
        maskClosable: boolean;
        width: import("../_util/type").Key;
        bodyStyle: {
            [key: string]: any;
        };
        closable: boolean;
        onClose: (...args: any[]) => any;
        placement: "bottom" | "left" | "right" | "top";
        "onUpdate:visible": (...args: any[]) => any;
        level: any;
        afterVisibleChange: (...args: any[]) => any;
        maskStyle: {
            [key: string]: any;
        };
        wrapStyle: {
            [key: string]: any;
        };
        headerStyle: {
            [key: string]: any;
        };
        drawerStyle: {
            [key: string]: any;
        };
        wrapClassName: string;
    } & {
        title?: import("../_util/type").VueNode;
        visible?: boolean;
        getContainer?: any;
        destroyOnClose?: boolean;
        handle?: import("../_util/type").VueNode;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        destroyClose: boolean;
        preVisible: boolean;
        parentDrawer: any;
    }> & {
        sPush: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        domFocus(): void;
        close(e: Event): void;
        push(): void;
        pull(): void;
        onDestroyTransitionEnd(): void;
        getDestroyOnClose(): boolean;
        getPushTransform(placement?: "bottom" | "left" | "right" | "top"): string;
        getRcDrawerStyle(): {
            zIndex: number;
            transform: string;
        };
        renderHeader(prefixCls: string): JSX.Element;
        renderCloseIcon(prefixCls: string): JSX.Element;
        renderBody(prefixCls: string): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    mask: boolean;
    prefixCls: string;
    keyboard: boolean;
    height: import("../_util/type").Key;
    zIndex: number;
    maskClosable: boolean;
    width: import("../_util/type").Key;
    bodyStyle: {
        [key: string]: any;
    };
    closable: boolean;
    onClose: (...args: any[]) => any;
    placement: "bottom" | "left" | "right" | "top";
    "onUpdate:visible": (...args: any[]) => any;
    level: any;
    afterVisibleChange: (...args: any[]) => any;
    maskStyle: {
        [key: string]: any;
    };
    wrapStyle: {
        [key: string]: any;
    };
    headerStyle: {
        [key: string]: any;
    };
    drawerStyle: {
        [key: string]: any;
    };
    wrapClassName: string;
} & {
    title?: import("../_util/type").VueNode;
    visible?: boolean;
    getContainer?: any;
    destroyOnClose?: boolean;
    handle?: import("../_util/type").VueNode;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    destroyClose: boolean;
    preVisible: boolean;
    parentDrawer: any;
}, {
    sPush: boolean;
}, {}, {
    domFocus(): void;
    close(e: Event): void;
    push(): void;
    pull(): void;
    onDestroyTransitionEnd(): void;
    getDestroyOnClose(): boolean;
    getPushTransform(placement?: "bottom" | "left" | "right" | "top"): string;
    getRcDrawerStyle(): {
        zIndex: number;
        transform: string;
    };
    renderHeader(prefixCls: string): JSX.Element;
    renderCloseIcon(prefixCls: string): JSX.Element;
    renderBody(prefixCls: string): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    mask: boolean;
    prefixCls: string;
    keyboard: boolean;
    height: import("../_util/type").Key;
    zIndex: number;
    maskClosable: boolean;
    width: import("../_util/type").Key;
    bodyStyle: {
        [key: string]: any;
    };
    closable: boolean;
    onClose: (...args: any[]) => any;
    placement: "bottom" | "left" | "right" | "top";
    "onUpdate:visible": (...args: any[]) => any;
    level: any;
    afterVisibleChange: (...args: any[]) => any;
    maskStyle: {
        [key: string]: any;
    };
    wrapStyle: {
        [key: string]: any;
    };
    headerStyle: {
        [key: string]: any;
    };
    drawerStyle: {
        [key: string]: any;
    };
    wrapClassName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
