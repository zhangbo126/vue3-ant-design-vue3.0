import { nextTick } from 'vue';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            visible: boolean;
            scrollEvent: any;
        };
        $props: Partial<{
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        }> & Pick<Readonly<{
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        } & {}>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            visible: boolean;
            scrollEvent: any;
        }, {}, {
            getCurrentScrollTop(): any;
            scrollToTop(e: Event): void;
            handleScroll(): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, "click"[], string, {
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onClick: (...args: any[]) => any;
        prefixCls: string;
        target: (...args: any[]) => any;
        visibilityHeight: number;
    } & {}> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        visible: boolean;
        scrollEvent: any;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        getCurrentScrollTop(): any;
        scrollToTop(e: Event): void;
        handleScroll(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onClick: (...args: any[]) => any;
    prefixCls: string;
    target: (...args: any[]) => any;
    visibilityHeight: number;
} & {}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    visible: boolean;
    scrollEvent: any;
}, {}, {
    getCurrentScrollTop(): any;
    scrollToTop(e: Event): void;
    handleScroll(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, "click"[], "click", {
    onClick: (...args: any[]) => any;
    prefixCls: string;
    target: (...args: any[]) => any;
    visibilityHeight: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            visible: boolean;
            scrollEvent: any;
        };
        $props: Partial<{
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        }> & Pick<Readonly<{
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        } & {}>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            visible: boolean;
            scrollEvent: any;
        }, {}, {
            getCurrentScrollTop(): any;
            scrollToTop(e: Event): void;
            handleScroll(): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, "click"[], string, {
            onClick: (...args: any[]) => any;
            prefixCls: string;
            target: (...args: any[]) => any;
            visibilityHeight: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onClick: (...args: any[]) => any;
        prefixCls: string;
        target: (...args: any[]) => any;
        visibilityHeight: number;
    } & {}> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        visible: boolean;
        scrollEvent: any;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        getCurrentScrollTop(): any;
        scrollToTop(e: Event): void;
        handleScroll(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onClick: (...args: any[]) => any;
    prefixCls: string;
    target: (...args: any[]) => any;
    visibilityHeight: number;
} & {}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    visible: boolean;
    scrollEvent: any;
}, {}, {
    getCurrentScrollTop(): any;
    scrollToTop(e: Event): void;
    handleScroll(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, "click"[], "click", {
    onClick: (...args: any[]) => any;
    prefixCls: string;
    target: (...args: any[]) => any;
    visibilityHeight: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
