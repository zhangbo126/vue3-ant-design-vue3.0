import { App } from 'vue';
import Countdown from './Countdown';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        }> & Pick<Readonly<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        } & {
            title?: import("../_util/type").VueNode;
            value?: import("../_util/type").Key;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            formatter?: any;
            valueStyle?: import("vue").CSSProperties;
            valueRender?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "title" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "value" | "prefix" | "suffix" | "formatter" | "valueStyle" | "valueRender">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        } & {
            title?: import("../_util/type").VueNode;
            value?: import("../_util/type").Key;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            formatter?: any;
            valueStyle?: import("vue").CSSProperties;
            valueRender?: any;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        format: string;
        onFinish: (...args: any[]) => any;
        decimalSeparator: string;
        precision: number;
        groupSeparator: string;
    } & {
        title?: import("../_util/type").VueNode;
        value?: import("../_util/type").Key;
        prefix?: import("../_util/type").VueNode;
        suffix?: import("../_util/type").VueNode;
        formatter?: any;
        valueStyle?: import("vue").CSSProperties;
        valueRender?: any;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    format: string;
    onFinish: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
    groupSeparator: string;
} & {
    title?: import("../_util/type").VueNode;
    value?: import("../_util/type").Key;
    prefix?: import("../_util/type").VueNode;
    suffix?: import("../_util/type").VueNode;
    formatter?: any;
    valueStyle?: import("vue").CSSProperties;
    valueRender?: any;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    format: string;
    onFinish: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
    groupSeparator: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Countdown: typeof Countdown;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        }> & Pick<Readonly<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        } & {
            title?: import("../_util/type").VueNode;
            value?: import("../_util/type").Key;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            formatter?: any;
            valueStyle?: import("vue").CSSProperties;
            valueRender?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "title" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "value" | "prefix" | "suffix" | "formatter" | "valueStyle" | "valueRender">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        } & {
            title?: import("../_util/type").VueNode;
            value?: import("../_util/type").Key;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            formatter?: any;
            valueStyle?: import("vue").CSSProperties;
            valueRender?: any;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            format: string;
            onFinish: (...args: any[]) => any;
            decimalSeparator: string;
            precision: number;
            groupSeparator: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        format: string;
        onFinish: (...args: any[]) => any;
        decimalSeparator: string;
        precision: number;
        groupSeparator: string;
    } & {
        title?: import("../_util/type").VueNode;
        value?: import("../_util/type").Key;
        prefix?: import("../_util/type").VueNode;
        suffix?: import("../_util/type").VueNode;
        formatter?: any;
        valueStyle?: import("vue").CSSProperties;
        valueRender?: any;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    format: string;
    onFinish: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
    groupSeparator: string;
} & {
    title?: import("../_util/type").VueNode;
    value?: import("../_util/type").Key;
    prefix?: import("../_util/type").VueNode;
    suffix?: import("../_util/type").VueNode;
    formatter?: any;
    valueStyle?: import("vue").CSSProperties;
    valueRender?: any;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    format: string;
    onFinish: (...args: any[]) => any;
    decimalSeparator: string;
    precision: number;
    groupSeparator: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Countdown: typeof Countdown;
});
export default _default;
