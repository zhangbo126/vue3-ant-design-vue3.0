import { App } from 'vue';
import CollapsePanel from './CollapsePanel';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        }> & Pick<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        } & {
            activeKey?: string | number | import("../_util/type").Key[];
            defaultActiveKey?: string | number | import("../_util/type").Key[];
            accordion?: boolean;
            destroyInactivePanel?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "activeKey" | "defaultActiveKey" | "accordion" | "destroyInactivePanel">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        } & {
            activeKey?: string | number | import("../_util/type").Key[];
            defaultActiveKey?: string | number | import("../_util/type").Key[];
            accordion?: boolean;
            destroyInactivePanel?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            renderExpandIcon(panelProps: import("./Collapse").PanelProps, prefixCls: string): any;
            handleChange(activeKey: string | number | import("../_util/type").Key[]): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        bordered: boolean;
        expandIcon: (...args: any[]) => any;
        openAnimation: {
            [key: string]: any;
        };
        expandIconPosition: "left" | "right";
        "onUpdate:activeKey": (...args: any[]) => any;
    } & {
        activeKey?: string | number | import("../_util/type").Key[];
        defaultActiveKey?: string | number | import("../_util/type").Key[];
        accordion?: boolean;
        destroyInactivePanel?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        renderExpandIcon(panelProps: import("./Collapse").PanelProps, prefixCls: string): any;
        handleChange(activeKey: string | number | import("../_util/type").Key[]): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    bordered: boolean;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    expandIconPosition: "left" | "right";
    "onUpdate:activeKey": (...args: any[]) => any;
} & {
    activeKey?: string | number | import("../_util/type").Key[];
    defaultActiveKey?: string | number | import("../_util/type").Key[];
    accordion?: boolean;
    destroyInactivePanel?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    renderExpandIcon(panelProps: import("./Collapse").PanelProps, prefixCls: string): any;
    handleChange(activeKey: string | number | import("../_util/type").Key[]): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    bordered: boolean;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    expandIconPosition: "left" | "right";
    "onUpdate:activeKey": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Panel: typeof CollapsePanel;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        }> & Pick<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        } & {
            activeKey?: string | number | import("../_util/type").Key[];
            defaultActiveKey?: string | number | import("../_util/type").Key[];
            accordion?: boolean;
            destroyInactivePanel?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "activeKey" | "defaultActiveKey" | "accordion" | "destroyInactivePanel">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        } & {
            activeKey?: string | number | import("../_util/type").Key[];
            defaultActiveKey?: string | number | import("../_util/type").Key[];
            accordion?: boolean;
            destroyInactivePanel?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            renderExpandIcon(panelProps: import("./Collapse").PanelProps, prefixCls: string): any;
            handleChange(activeKey: string | number | import("../_util/type").Key[]): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            bordered: boolean;
            expandIcon: (...args: any[]) => any;
            openAnimation: {
                [key: string]: any;
            };
            expandIconPosition: "left" | "right";
            "onUpdate:activeKey": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        bordered: boolean;
        expandIcon: (...args: any[]) => any;
        openAnimation: {
            [key: string]: any;
        };
        expandIconPosition: "left" | "right";
        "onUpdate:activeKey": (...args: any[]) => any;
    } & {
        activeKey?: string | number | import("../_util/type").Key[];
        defaultActiveKey?: string | number | import("../_util/type").Key[];
        accordion?: boolean;
        destroyInactivePanel?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {
        renderExpandIcon(panelProps: import("./Collapse").PanelProps, prefixCls: string): any;
        handleChange(activeKey: string | number | import("../_util/type").Key[]): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    bordered: boolean;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    expandIconPosition: "left" | "right";
    "onUpdate:activeKey": (...args: any[]) => any;
} & {
    activeKey?: string | number | import("../_util/type").Key[];
    defaultActiveKey?: string | number | import("../_util/type").Key[];
    accordion?: boolean;
    destroyInactivePanel?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    renderExpandIcon(panelProps: import("./Collapse").PanelProps, prefixCls: string): any;
    handleChange(activeKey: string | number | import("../_util/type").Key[]): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    bordered: boolean;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    expandIconPosition: "left" | "right";
    "onUpdate:activeKey": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Panel: typeof CollapsePanel;
});
export default _default;
