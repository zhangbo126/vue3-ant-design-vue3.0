import { App, ExtractPropTypes } from 'vue';
import { Divider, ItemGroup } from '../vc-menu';
import SubMenu from './SubMenu';
import Item from './MenuItem';
import { SiderContextProps } from '../layout/Sider';
export declare const MenuMode: import("vue-types").VueTypeDef<string>;
export declare const menuProps: {
    theme: import("vue-types").VueTypeDef<import("./SubMenu").MenuTheme> & {
        default: import("./SubMenu").MenuTheme;
    };
    mode: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
    selectable: import("vue-types").VueTypeValidableDef<boolean>;
    selectedKeys: import("vue-types").VueTypeDef<import("../_util/type").Key[]>;
    defaultSelectedKeys: import("vue-types").VueTypeDef<import("../_util/type").Key[]>;
    openKeys: import("vue-types").VueTypeDef<import("../_util/type").Key[]>;
    defaultOpenKeys: import("vue-types").VueTypeDef<import("../_util/type").Key[]>;
    openAnimation: import("vue-types").VueTypeDef<string | {
        [key: string]: any;
    }>;
    openTransitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    multiple: import("vue-types").VueTypeValidableDef<boolean>;
    inlineIndent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    inlineCollapsed: import("vue-types").VueTypeValidableDef<boolean>;
    isRootMenu: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    focusable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    onOpenChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onDeselect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onMouseenter: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSelectChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    visible: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    activeKey: import("vue-types").VueTypeDef<import("../_util/type").Key>;
    triggerSubMenuAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    subMenuOpenDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    subMenuCloseDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    level: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    forceSubMenuRender: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    itemIcon: import("vue-types").VueTypeValidableDef<any>;
    expandIcon: import("vue-types").VueTypeValidableDef<any>;
    overflowedIndicator: import("vue-types").VueTypeValidableDef<any>;
};
export declare type MenuProps = Partial<ExtractPropTypes<typeof menuProps>>;
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sOpenKeys: import("../_util/type").Key[];
        };
        $props: Partial<{
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        }> & Pick<Readonly<{
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        } & {
            multiple?: boolean;
            itemIcon?: any;
            expandIcon?: any;
            selectable?: boolean;
            openKeys?: import("../_util/type").Key[];
            openAnimation?: string | {
                [key: string]: any;
            };
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            defaultOpenKeys?: import("../_util/type").Key[];
            inlineCollapsed?: boolean;
            activeKey?: import("../_util/type").Key;
            overflowedIndicator?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "multiple" | "itemIcon" | "expandIcon" | "selectable" | "openKeys" | "openAnimation" | "selectedKeys" | "defaultSelectedKeys" | "defaultOpenKeys" | "inlineCollapsed" | "activeKey" | "overflowedIndicator">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "click" | "mouseenter" | "select" | "update:selectedKeys" | "update:openKeys" | "openChange" | "selectChange" | "deselect", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        } & {
            multiple?: boolean;
            itemIcon?: any;
            expandIcon?: any;
            selectable?: boolean;
            openKeys?: import("../_util/type").Key[];
            openAnimation?: string | {
                [key: string]: any;
            };
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            defaultOpenKeys?: import("../_util/type").Key[];
            inlineCollapsed?: boolean;
            activeKey?: import("../_util/type").Key;
            overflowedIndicator?: any;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            layoutSiderContext: SiderContextProps;
            layoutSiderCollapsed: import("vue").Ref<false> | import("vue").Ref<true>;
            propsUpdating: boolean;
            switchingModeFromInline: boolean;
            leaveAnimationExecutedWhenInlineCollapsed: boolean;
            inlineOpenKeys: any[];
        }, {
            sOpenKeys: import("../_util/type").Key[];
        }, {}, {
            collapsedChange(val: unknown): void;
            restoreModeVerticalFromInline(): void;
            handleMouseEnter(e: Event): void;
            handleTransitionEnd(e: TransitionEvent): void;
            handleClick(e: Event): void;
            handleSelect(info: any): void;
            handleDeselect(info: any): void;
            handleOpenChange(openKeys: import("../_util/type").Key[]): void;
            setOpenKeys(openKeys: import("../_util/type").Key[]): void;
            getRealMenuMode(): string;
            getInlineCollapsed(): boolean;
            getMenuOpenAnimation(menuMode: string): string | {
                [key: string]: any;
            };
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, ("click" | "mouseenter" | "select" | "update:selectedKeys" | "update:openKeys" | "openChange" | "selectChange" | "deselect")[], string, {
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onClick: (...args: any[]) => any;
        onMouseenter: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        visible: boolean;
        mode: string;
        getPopupContainer: (...args: any[]) => any;
        builtinPlacements: {
            [key: string]: any;
        };
        onDeselect: (...args: any[]) => any;
        focusable: boolean;
        isRootMenu: boolean;
        triggerSubMenuAction: string;
        forceSubMenuRender: boolean;
        subMenuOpenDelay: number;
        subMenuCloseDelay: number;
        level: number;
        inlineIndent: number;
        openTransitionName: string;
        theme: import("./SubMenu").MenuTheme;
        onOpenChange: (...args: any[]) => any;
        onSelectChange: (...args: any[]) => any;
    } & {
        multiple?: boolean;
        itemIcon?: any;
        expandIcon?: any;
        selectable?: boolean;
        openKeys?: import("../_util/type").Key[];
        openAnimation?: string | {
            [key: string]: any;
        };
        selectedKeys?: import("../_util/type").Key[];
        defaultSelectedKeys?: import("../_util/type").Key[];
        defaultOpenKeys?: import("../_util/type").Key[];
        inlineCollapsed?: boolean;
        activeKey?: import("../_util/type").Key;
        overflowedIndicator?: any;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        layoutSiderContext: SiderContextProps;
        layoutSiderCollapsed: import("vue").Ref<false> | import("vue").Ref<true>;
        propsUpdating: boolean;
        switchingModeFromInline: boolean;
        leaveAnimationExecutedWhenInlineCollapsed: boolean;
        inlineOpenKeys: any[];
    }> & {
        sOpenKeys: import("../_util/type").Key[];
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        collapsedChange(val: unknown): void;
        restoreModeVerticalFromInline(): void;
        handleMouseEnter(e: Event): void;
        handleTransitionEnd(e: TransitionEvent): void;
        handleClick(e: Event): void;
        handleSelect(info: any): void;
        handleDeselect(info: any): void;
        handleOpenChange(openKeys: import("../_util/type").Key[]): void;
        setOpenKeys(openKeys: import("../_util/type").Key[]): void;
        getRealMenuMode(): string;
        getInlineCollapsed(): boolean;
        getMenuOpenAnimation(menuMode: string): string | {
            [key: string]: any;
        };
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onClick: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    visible: boolean;
    mode: string;
    getPopupContainer: (...args: any[]) => any;
    builtinPlacements: {
        [key: string]: any;
    };
    onDeselect: (...args: any[]) => any;
    focusable: boolean;
    isRootMenu: boolean;
    triggerSubMenuAction: string;
    forceSubMenuRender: boolean;
    subMenuOpenDelay: number;
    subMenuCloseDelay: number;
    level: number;
    inlineIndent: number;
    openTransitionName: string;
    theme: import("./SubMenu").MenuTheme;
    onOpenChange: (...args: any[]) => any;
    onSelectChange: (...args: any[]) => any;
} & {
    multiple?: boolean;
    itemIcon?: any;
    expandIcon?: any;
    selectable?: boolean;
    openKeys?: import("../_util/type").Key[];
    openAnimation?: string | {
        [key: string]: any;
    };
    selectedKeys?: import("../_util/type").Key[];
    defaultSelectedKeys?: import("../_util/type").Key[];
    defaultOpenKeys?: import("../_util/type").Key[];
    inlineCollapsed?: boolean;
    activeKey?: import("../_util/type").Key;
    overflowedIndicator?: any;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    layoutSiderContext: SiderContextProps;
    layoutSiderCollapsed: import("vue").Ref<false> | import("vue").Ref<true>;
    propsUpdating: boolean;
    switchingModeFromInline: boolean;
    leaveAnimationExecutedWhenInlineCollapsed: boolean;
    inlineOpenKeys: any[];
}, {
    sOpenKeys: import("../_util/type").Key[];
}, {}, {
    collapsedChange(val: unknown): void;
    restoreModeVerticalFromInline(): void;
    handleMouseEnter(e: Event): void;
    handleTransitionEnd(e: TransitionEvent): void;
    handleClick(e: Event): void;
    handleSelect(info: any): void;
    handleDeselect(info: any): void;
    handleOpenChange(openKeys: import("../_util/type").Key[]): void;
    setOpenKeys(openKeys: import("../_util/type").Key[]): void;
    getRealMenuMode(): string;
    getInlineCollapsed(): boolean;
    getMenuOpenAnimation(menuMode: string): string | {
        [key: string]: any;
    };
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, ("click" | "mouseenter" | "select" | "update:selectedKeys" | "update:openKeys" | "openChange" | "selectChange" | "deselect")[], "select" | "click" | "mouseenter" | "openChange" | "update:selectedKeys" | "update:openKeys" | "selectChange" | "deselect", {
    onClick: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    visible: boolean;
    mode: string;
    getPopupContainer: (...args: any[]) => any;
    builtinPlacements: {
        [key: string]: any;
    };
    onDeselect: (...args: any[]) => any;
    focusable: boolean;
    isRootMenu: boolean;
    triggerSubMenuAction: string;
    forceSubMenuRender: boolean;
    subMenuOpenDelay: number;
    subMenuCloseDelay: number;
    level: number;
    inlineIndent: number;
    openTransitionName: string;
    theme: import("./SubMenu").MenuTheme;
    onOpenChange: (...args: any[]) => any;
    onSelectChange: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Item: typeof Item;
    readonly SubMenu: typeof SubMenu;
    readonly Divider: typeof Divider;
    readonly ItemGroup: typeof ItemGroup;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sOpenKeys: import("../_util/type").Key[];
        };
        $props: Partial<{
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        }> & Pick<Readonly<{
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        } & {
            multiple?: boolean;
            itemIcon?: any;
            expandIcon?: any;
            selectable?: boolean;
            openKeys?: import("../_util/type").Key[];
            openAnimation?: string | {
                [key: string]: any;
            };
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            defaultOpenKeys?: import("../_util/type").Key[];
            inlineCollapsed?: boolean;
            activeKey?: import("../_util/type").Key;
            overflowedIndicator?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "multiple" | "itemIcon" | "expandIcon" | "selectable" | "openKeys" | "openAnimation" | "selectedKeys" | "defaultSelectedKeys" | "defaultOpenKeys" | "inlineCollapsed" | "activeKey" | "overflowedIndicator">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "click" | "mouseenter" | "select" | "update:selectedKeys" | "update:openKeys" | "openChange" | "selectChange" | "deselect", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        } & {
            multiple?: boolean;
            itemIcon?: any;
            expandIcon?: any;
            selectable?: boolean;
            openKeys?: import("../_util/type").Key[];
            openAnimation?: string | {
                [key: string]: any;
            };
            selectedKeys?: import("../_util/type").Key[];
            defaultSelectedKeys?: import("../_util/type").Key[];
            defaultOpenKeys?: import("../_util/type").Key[];
            inlineCollapsed?: boolean;
            activeKey?: import("../_util/type").Key;
            overflowedIndicator?: any;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            layoutSiderContext: SiderContextProps;
            layoutSiderCollapsed: import("vue").Ref<false> | import("vue").Ref<true>;
            propsUpdating: boolean;
            switchingModeFromInline: boolean;
            leaveAnimationExecutedWhenInlineCollapsed: boolean;
            inlineOpenKeys: any[];
        }, {
            sOpenKeys: import("../_util/type").Key[];
        }, {}, {
            collapsedChange(val: unknown): void;
            restoreModeVerticalFromInline(): void;
            handleMouseEnter(e: Event): void;
            handleTransitionEnd(e: TransitionEvent): void;
            handleClick(e: Event): void;
            handleSelect(info: any): void;
            handleDeselect(info: any): void;
            handleOpenChange(openKeys: import("../_util/type").Key[]): void;
            setOpenKeys(openKeys: import("../_util/type").Key[]): void;
            getRealMenuMode(): string;
            getInlineCollapsed(): boolean;
            getMenuOpenAnimation(menuMode: string): string | {
                [key: string]: any;
            };
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, ("click" | "mouseenter" | "select" | "update:selectedKeys" | "update:openKeys" | "openChange" | "selectChange" | "deselect")[], string, {
            onClick: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            visible: boolean;
            mode: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            onDeselect: (...args: any[]) => any;
            focusable: boolean;
            isRootMenu: boolean;
            triggerSubMenuAction: string;
            forceSubMenuRender: boolean;
            subMenuOpenDelay: number;
            subMenuCloseDelay: number;
            level: number;
            inlineIndent: number;
            openTransitionName: string;
            theme: import("./SubMenu").MenuTheme;
            onOpenChange: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onClick: (...args: any[]) => any;
        onMouseenter: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        visible: boolean;
        mode: string;
        getPopupContainer: (...args: any[]) => any;
        builtinPlacements: {
            [key: string]: any;
        };
        onDeselect: (...args: any[]) => any;
        focusable: boolean;
        isRootMenu: boolean;
        triggerSubMenuAction: string;
        forceSubMenuRender: boolean;
        subMenuOpenDelay: number;
        subMenuCloseDelay: number;
        level: number;
        inlineIndent: number;
        openTransitionName: string;
        theme: import("./SubMenu").MenuTheme;
        onOpenChange: (...args: any[]) => any;
        onSelectChange: (...args: any[]) => any;
    } & {
        multiple?: boolean;
        itemIcon?: any;
        expandIcon?: any;
        selectable?: boolean;
        openKeys?: import("../_util/type").Key[];
        openAnimation?: string | {
            [key: string]: any;
        };
        selectedKeys?: import("../_util/type").Key[];
        defaultSelectedKeys?: import("../_util/type").Key[];
        defaultOpenKeys?: import("../_util/type").Key[];
        inlineCollapsed?: boolean;
        activeKey?: import("../_util/type").Key;
        overflowedIndicator?: any;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        layoutSiderContext: SiderContextProps;
        layoutSiderCollapsed: import("vue").Ref<false> | import("vue").Ref<true>;
        propsUpdating: boolean;
        switchingModeFromInline: boolean;
        leaveAnimationExecutedWhenInlineCollapsed: boolean;
        inlineOpenKeys: any[];
    }> & {
        sOpenKeys: import("../_util/type").Key[];
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        collapsedChange(val: unknown): void;
        restoreModeVerticalFromInline(): void;
        handleMouseEnter(e: Event): void;
        handleTransitionEnd(e: TransitionEvent): void;
        handleClick(e: Event): void;
        handleSelect(info: any): void;
        handleDeselect(info: any): void;
        handleOpenChange(openKeys: import("../_util/type").Key[]): void;
        setOpenKeys(openKeys: import("../_util/type").Key[]): void;
        getRealMenuMode(): string;
        getInlineCollapsed(): boolean;
        getMenuOpenAnimation(menuMode: string): string | {
            [key: string]: any;
        };
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onClick: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    visible: boolean;
    mode: string;
    getPopupContainer: (...args: any[]) => any;
    builtinPlacements: {
        [key: string]: any;
    };
    onDeselect: (...args: any[]) => any;
    focusable: boolean;
    isRootMenu: boolean;
    triggerSubMenuAction: string;
    forceSubMenuRender: boolean;
    subMenuOpenDelay: number;
    subMenuCloseDelay: number;
    level: number;
    inlineIndent: number;
    openTransitionName: string;
    theme: import("./SubMenu").MenuTheme;
    onOpenChange: (...args: any[]) => any;
    onSelectChange: (...args: any[]) => any;
} & {
    multiple?: boolean;
    itemIcon?: any;
    expandIcon?: any;
    selectable?: boolean;
    openKeys?: import("../_util/type").Key[];
    openAnimation?: string | {
        [key: string]: any;
    };
    selectedKeys?: import("../_util/type").Key[];
    defaultSelectedKeys?: import("../_util/type").Key[];
    defaultOpenKeys?: import("../_util/type").Key[];
    inlineCollapsed?: boolean;
    activeKey?: import("../_util/type").Key;
    overflowedIndicator?: any;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    layoutSiderContext: SiderContextProps;
    layoutSiderCollapsed: import("vue").Ref<false> | import("vue").Ref<true>;
    propsUpdating: boolean;
    switchingModeFromInline: boolean;
    leaveAnimationExecutedWhenInlineCollapsed: boolean;
    inlineOpenKeys: any[];
}, {
    sOpenKeys: import("../_util/type").Key[];
}, {}, {
    collapsedChange(val: unknown): void;
    restoreModeVerticalFromInline(): void;
    handleMouseEnter(e: Event): void;
    handleTransitionEnd(e: TransitionEvent): void;
    handleClick(e: Event): void;
    handleSelect(info: any): void;
    handleDeselect(info: any): void;
    handleOpenChange(openKeys: import("../_util/type").Key[]): void;
    setOpenKeys(openKeys: import("../_util/type").Key[]): void;
    getRealMenuMode(): string;
    getInlineCollapsed(): boolean;
    getMenuOpenAnimation(menuMode: string): string | {
        [key: string]: any;
    };
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, ("click" | "mouseenter" | "select" | "update:selectedKeys" | "update:openKeys" | "openChange" | "selectChange" | "deselect")[], "select" | "click" | "mouseenter" | "openChange" | "update:selectedKeys" | "update:openKeys" | "selectChange" | "deselect", {
    onClick: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    visible: boolean;
    mode: string;
    getPopupContainer: (...args: any[]) => any;
    builtinPlacements: {
        [key: string]: any;
    };
    onDeselect: (...args: any[]) => any;
    focusable: boolean;
    isRootMenu: boolean;
    triggerSubMenuAction: string;
    forceSubMenuRender: boolean;
    subMenuOpenDelay: number;
    subMenuCloseDelay: number;
    level: number;
    inlineIndent: number;
    openTransitionName: string;
    theme: import("./SubMenu").MenuTheme;
    onOpenChange: (...args: any[]) => any;
    onSelectChange: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Item: typeof Item;
    readonly SubMenu: typeof SubMenu;
    readonly Divider: typeof Divider;
    readonly ItemGroup: typeof ItemGroup;
});
export default _default;
