import { App } from 'vue';
import { ModalFunc } from './Modal';
export { IActionButtonProps as ActionButtonProps } from './ActionButton';
export { ModalProps, ModalFuncProps } from './Modal';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sVisible: boolean;
        };
        $props: Partial<{
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        }> & Pick<Readonly<{
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        } & {
            icon?: any;
            footer?: any;
            title?: any;
            mask?: boolean;
            keyboard?: boolean;
            visible?: boolean;
            forceRender?: boolean;
            maskClosable?: boolean;
            width?: import("../_util/type").Key;
            bodyStyle?: import("vue").CSSProperties;
            closable?: boolean;
            centered?: boolean;
            closeIcon?: any;
            onOk?: (e: MouseEvent) => void;
            destroyOnClose?: boolean;
            maskStyle?: import("vue").CSSProperties;
            focusTriggerAfterClose?: boolean;
            confirmLoading?: boolean;
            okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            onCancel?: (e: MouseEvent) => void;
            okText?: any;
            cancelText?: any;
            okButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
            cancelButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "icon" | "footer" | "title" | "mask" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "keyboard" | "visible" | "forceRender" | "maskClosable" | "width" | "bodyStyle" | "closable" | "centered" | "closeIcon" | "onOk" | "destroyOnClose" | "maskStyle" | "focusTriggerAfterClose" | "confirmLoading" | "okType" | "onCancel" | "okText" | "cancelText" | "okButtonProps" | "cancelButtonProps">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "cancel" | "update:visible" | "ok", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        } & {
            icon?: any;
            footer?: any;
            title?: any;
            mask?: boolean;
            keyboard?: boolean;
            visible?: boolean;
            forceRender?: boolean;
            maskClosable?: boolean;
            width?: import("../_util/type").Key;
            bodyStyle?: import("vue").CSSProperties;
            closable?: boolean;
            centered?: boolean;
            closeIcon?: any;
            onOk?: (e: MouseEvent) => void;
            destroyOnClose?: boolean;
            maskStyle?: import("vue").CSSProperties;
            focusTriggerAfterClose?: boolean;
            confirmLoading?: boolean;
            okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            onCancel?: (e: MouseEvent) => void;
            okText?: any;
            cancelText?: any;
            okButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
            cancelButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            sVisible: boolean;
        }, {}, {
            handleCancel(e: MouseEvent): void;
            handleOk(e: MouseEvent): void;
            renderFooter(locale: import("./Modal").ModalLocale): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "cancel" | "update:visible" | "ok")[], string, {
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        transitionName: string;
        zIndex: number;
        maskTransitionName: string;
        afterClose: (...args: any[]) => any;
        getContainer: (...args: any[]) => any;
        wrapClassName: string;
        wrapProps: {
            [key: string]: any;
        };
    } & {
        icon?: any;
        footer?: any;
        title?: any;
        mask?: boolean;
        keyboard?: boolean;
        visible?: boolean;
        forceRender?: boolean;
        maskClosable?: boolean;
        width?: import("../_util/type").Key;
        bodyStyle?: import("vue").CSSProperties;
        closable?: boolean;
        centered?: boolean;
        closeIcon?: any;
        onOk?: (e: MouseEvent) => void;
        destroyOnClose?: boolean;
        maskStyle?: import("vue").CSSProperties;
        focusTriggerAfterClose?: boolean;
        confirmLoading?: boolean;
        okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        onCancel?: (e: MouseEvent) => void;
        okText?: any;
        cancelText?: any;
        okButtonProps?: {
            prefixCls: string;
            type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            htmlType: "button" | "reset" | "submit";
            shape: "circle" | "round" | "circle-outline";
            size: "default" | "small" | "large";
            loading: boolean | {
                [key: string]: any;
            };
            disabled: boolean;
            ghost: boolean;
            block: boolean;
            icon: void | JSX.Element;
            href: string;
            title: string;
            onClick: any;
        };
        cancelButtonProps?: {
            prefixCls: string;
            type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            htmlType: "button" | "reset" | "submit";
            shape: "circle" | "round" | "circle-outline";
            size: "default" | "small" | "large";
            loading: boolean | {
                [key: string]: any;
            };
            disabled: boolean;
            ghost: boolean;
            block: boolean;
            icon: void | JSX.Element;
            href: string;
            title: string;
            onClick: any;
        };
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        sVisible: boolean;
    } & {} & {
        handleCancel(e: MouseEvent): void;
        handleOk(e: MouseEvent): void;
        renderFooter(locale: import("./Modal").ModalLocale): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    transitionName: string;
    zIndex: number;
    maskTransitionName: string;
    afterClose: (...args: any[]) => any;
    getContainer: (...args: any[]) => any;
    wrapClassName: string;
    wrapProps: {
        [key: string]: any;
    };
} & {
    icon?: any;
    footer?: any;
    title?: any;
    mask?: boolean;
    keyboard?: boolean;
    visible?: boolean;
    forceRender?: boolean;
    maskClosable?: boolean;
    width?: import("../_util/type").Key;
    bodyStyle?: import("vue").CSSProperties;
    closable?: boolean;
    centered?: boolean;
    closeIcon?: any;
    onOk?: (e: MouseEvent) => void;
    destroyOnClose?: boolean;
    maskStyle?: import("vue").CSSProperties;
    focusTriggerAfterClose?: boolean;
    confirmLoading?: boolean;
    okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
    onCancel?: (e: MouseEvent) => void;
    okText?: any;
    cancelText?: any;
    okButtonProps?: {
        prefixCls: string;
        type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        htmlType: "button" | "reset" | "submit";
        shape: "circle" | "round" | "circle-outline";
        size: "default" | "small" | "large";
        loading: boolean | {
            [key: string]: any;
        };
        disabled: boolean;
        ghost: boolean;
        block: boolean;
        icon: void | JSX.Element;
        href: string;
        title: string;
        onClick: any;
    };
    cancelButtonProps?: {
        prefixCls: string;
        type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        htmlType: "button" | "reset" | "submit";
        shape: "circle" | "round" | "circle-outline";
        size: "default" | "small" | "large";
        loading: boolean | {
            [key: string]: any;
        };
        disabled: boolean;
        ghost: boolean;
        block: boolean;
        icon: void | JSX.Element;
        href: string;
        title: string;
        onClick: any;
    };
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sVisible: boolean;
}, {}, {
    handleCancel(e: MouseEvent): void;
    handleOk(e: MouseEvent): void;
    renderFooter(locale: import("./Modal").ModalLocale): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "cancel" | "update:visible" | "ok")[], "change" | "cancel" | "update:visible" | "ok", {
    prefixCls: string;
    transitionName: string;
    zIndex: number;
    maskTransitionName: string;
    afterClose: (...args: any[]) => any;
    getContainer: (...args: any[]) => any;
    wrapClassName: string;
    wrapProps: {
        [key: string]: any;
    };
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly info: ModalFunc;
    readonly success: ModalFunc;
    readonly error: ModalFunc;
    readonly warn: ModalFunc;
    readonly warning: ModalFunc;
    readonly confirm: ModalFunc;
    readonly destroyAll: () => void;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sVisible: boolean;
        };
        $props: Partial<{
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        }> & Pick<Readonly<{
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        } & {
            icon?: any;
            footer?: any;
            title?: any;
            mask?: boolean;
            keyboard?: boolean;
            visible?: boolean;
            forceRender?: boolean;
            maskClosable?: boolean;
            width?: import("../_util/type").Key;
            bodyStyle?: import("vue").CSSProperties;
            closable?: boolean;
            centered?: boolean;
            closeIcon?: any;
            onOk?: (e: MouseEvent) => void;
            destroyOnClose?: boolean;
            maskStyle?: import("vue").CSSProperties;
            focusTriggerAfterClose?: boolean;
            confirmLoading?: boolean;
            okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            onCancel?: (e: MouseEvent) => void;
            okText?: any;
            cancelText?: any;
            okButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
            cancelButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "icon" | "footer" | "title" | "mask" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "keyboard" | "visible" | "forceRender" | "maskClosable" | "width" | "bodyStyle" | "closable" | "centered" | "closeIcon" | "onOk" | "destroyOnClose" | "maskStyle" | "focusTriggerAfterClose" | "confirmLoading" | "okType" | "onCancel" | "okText" | "cancelText" | "okButtonProps" | "cancelButtonProps">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "cancel" | "update:visible" | "ok", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        } & {
            icon?: any;
            footer?: any;
            title?: any;
            mask?: boolean;
            keyboard?: boolean;
            visible?: boolean;
            forceRender?: boolean;
            maskClosable?: boolean;
            width?: import("../_util/type").Key;
            bodyStyle?: import("vue").CSSProperties;
            closable?: boolean;
            centered?: boolean;
            closeIcon?: any;
            onOk?: (e: MouseEvent) => void;
            destroyOnClose?: boolean;
            maskStyle?: import("vue").CSSProperties;
            focusTriggerAfterClose?: boolean;
            confirmLoading?: boolean;
            okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            onCancel?: (e: MouseEvent) => void;
            okText?: any;
            cancelText?: any;
            okButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
            cancelButtonProps?: {
                prefixCls: string;
                type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
                htmlType: "button" | "reset" | "submit";
                shape: "circle" | "round" | "circle-outline";
                size: "default" | "small" | "large";
                loading: boolean | {
                    [key: string]: any;
                };
                disabled: boolean;
                ghost: boolean;
                block: boolean;
                icon: void | JSX.Element;
                href: string;
                title: string;
                onClick: any;
            };
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            sVisible: boolean;
        }, {}, {
            handleCancel(e: MouseEvent): void;
            handleOk(e: MouseEvent): void;
            renderFooter(locale: import("./Modal").ModalLocale): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "cancel" | "update:visible" | "ok")[], string, {
            prefixCls: string;
            transitionName: string;
            zIndex: number;
            maskTransitionName: string;
            afterClose: (...args: any[]) => any;
            getContainer: (...args: any[]) => any;
            wrapClassName: string;
            wrapProps: {
                [key: string]: any;
            };
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        transitionName: string;
        zIndex: number;
        maskTransitionName: string;
        afterClose: (...args: any[]) => any;
        getContainer: (...args: any[]) => any;
        wrapClassName: string;
        wrapProps: {
            [key: string]: any;
        };
    } & {
        icon?: any;
        footer?: any;
        title?: any;
        mask?: boolean;
        keyboard?: boolean;
        visible?: boolean;
        forceRender?: boolean;
        maskClosable?: boolean;
        width?: import("../_util/type").Key;
        bodyStyle?: import("vue").CSSProperties;
        closable?: boolean;
        centered?: boolean;
        closeIcon?: any;
        onOk?: (e: MouseEvent) => void;
        destroyOnClose?: boolean;
        maskStyle?: import("vue").CSSProperties;
        focusTriggerAfterClose?: boolean;
        confirmLoading?: boolean;
        okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        onCancel?: (e: MouseEvent) => void;
        okText?: any;
        cancelText?: any;
        okButtonProps?: {
            prefixCls: string;
            type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            htmlType: "button" | "reset" | "submit";
            shape: "circle" | "round" | "circle-outline";
            size: "default" | "small" | "large";
            loading: boolean | {
                [key: string]: any;
            };
            disabled: boolean;
            ghost: boolean;
            block: boolean;
            icon: void | JSX.Element;
            href: string;
            title: string;
            onClick: any;
        };
        cancelButtonProps?: {
            prefixCls: string;
            type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            htmlType: "button" | "reset" | "submit";
            shape: "circle" | "round" | "circle-outline";
            size: "default" | "small" | "large";
            loading: boolean | {
                [key: string]: any;
            };
            disabled: boolean;
            ghost: boolean;
            block: boolean;
            icon: void | JSX.Element;
            href: string;
            title: string;
            onClick: any;
        };
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        sVisible: boolean;
    } & {} & {
        handleCancel(e: MouseEvent): void;
        handleOk(e: MouseEvent): void;
        renderFooter(locale: import("./Modal").ModalLocale): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    transitionName: string;
    zIndex: number;
    maskTransitionName: string;
    afterClose: (...args: any[]) => any;
    getContainer: (...args: any[]) => any;
    wrapClassName: string;
    wrapProps: {
        [key: string]: any;
    };
} & {
    icon?: any;
    footer?: any;
    title?: any;
    mask?: boolean;
    keyboard?: boolean;
    visible?: boolean;
    forceRender?: boolean;
    maskClosable?: boolean;
    width?: import("../_util/type").Key;
    bodyStyle?: import("vue").CSSProperties;
    closable?: boolean;
    centered?: boolean;
    closeIcon?: any;
    onOk?: (e: MouseEvent) => void;
    destroyOnClose?: boolean;
    maskStyle?: import("vue").CSSProperties;
    focusTriggerAfterClose?: boolean;
    confirmLoading?: boolean;
    okType?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
    onCancel?: (e: MouseEvent) => void;
    okText?: any;
    cancelText?: any;
    okButtonProps?: {
        prefixCls: string;
        type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        htmlType: "button" | "reset" | "submit";
        shape: "circle" | "round" | "circle-outline";
        size: "default" | "small" | "large";
        loading: boolean | {
            [key: string]: any;
        };
        disabled: boolean;
        ghost: boolean;
        block: boolean;
        icon: void | JSX.Element;
        href: string;
        title: string;
        onClick: any;
    };
    cancelButtonProps?: {
        prefixCls: string;
        type: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        htmlType: "button" | "reset" | "submit";
        shape: "circle" | "round" | "circle-outline";
        size: "default" | "small" | "large";
        loading: boolean | {
            [key: string]: any;
        };
        disabled: boolean;
        ghost: boolean;
        block: boolean;
        icon: void | JSX.Element;
        href: string;
        title: string;
        onClick: any;
    };
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sVisible: boolean;
}, {}, {
    handleCancel(e: MouseEvent): void;
    handleOk(e: MouseEvent): void;
    renderFooter(locale: import("./Modal").ModalLocale): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "cancel" | "update:visible" | "ok")[], "change" | "cancel" | "update:visible" | "ok", {
    prefixCls: string;
    transitionName: string;
    zIndex: number;
    maskTransitionName: string;
    afterClose: (...args: any[]) => any;
    getContainer: (...args: any[]) => any;
    wrapClassName: string;
    wrapProps: {
        [key: string]: any;
    };
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly info: ModalFunc;
    readonly success: ModalFunc;
    readonly error: ModalFunc;
    readonly warn: ModalFunc;
    readonly warning: ModalFunc;
    readonly confirm: ModalFunc;
    readonly destroyAll: () => void;
});
export default _default;
