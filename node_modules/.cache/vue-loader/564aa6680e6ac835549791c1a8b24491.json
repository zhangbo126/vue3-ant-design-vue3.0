{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\crm-template\\src\\views\\form\\basicForm\\index.vue?vue&type=template&id=ccf78538&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\crm-template\\src\\views\\form\\basicForm\\index.vue","mtime":1612250320217},{"path":"C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593498932153},{"path":"C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1610000930346},{"path":"C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593498932153},{"path":"C:\\Users\\Administrator\\Desktop\\crm-template\\node_modules\\vue-loader\\lib\\index.js","mtime":1610000930346}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}